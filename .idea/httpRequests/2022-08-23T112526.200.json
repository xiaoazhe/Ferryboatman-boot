{
  "code": 200,
  "msg": null,
  "data": [
    {
      "id": "062ca3475e8193a4a81853a4bf41a8a1",
      "oid": 2,
      "title": "JVM堆",
      "summary": "JVM堆",
      "content": "![37d12f2eb9389b503a80d4b38b35e5dde6116ed7.png](http://1.116.227.4/group1/M00/00/00/CgAMDGC7SJ-AF14XAAOIDjJIIAo139.png)\n![src=http___blog.onlycj.com_wpcontent_uploads_2016_11_1366.pngrefer=http___blog.onlycj.jpg](http://1.116.227.4/group1/M00/00/00/CgAMDGC7SHyAdq-wAAG4Rt_BlXU057.jpg)\n![timg.jpg](http://1.116.227.4/group1/M00/00/00/CgAMDGC7SIeANR8BAAATziywEPc587.jpg)\n<h1>堆</h1>\n\n<h2>堆的核心概念</h2>\n\n<p>堆针对一个JVM进程来说是唯一的，也就是一个进程只有一个JVM，但是进程包含多个线程，他们是共享同一堆空间的。</p>\n\n<p><img alt=\"image-20200706195127740\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724553658.png\" /></p>\n\n<p>一个JVM实例只存在一个堆内存，堆也是Java内存管理的核心区域。</p>\n\n<p>Java堆区在JVM启动的时候即被创建，其空间大小也就确定了。是JVM管理的最大一块内存空间。</p>\n\n<ul>\n\t<li>堆内存的大小是可以调节的。</li>\n</ul>\n\n<p>《Java虚拟机规范》规定，堆可以处于物理上不连续的内存空间中，但在逻辑上它应该被视为连续的。</p>\n\n<p>所有的线程共享Java堆，在这里还可以划分线程私有的缓冲区（Thread Local Allocation Buffer，TLAB）。</p>\n\n<blockquote>\n<p>-Xms10m：最小堆内存</p>\n\n<p>-Xmx10m：最大堆内存</p>\n</blockquote>\n\n<p>下图就是使用：Java VisualVM查看堆空间的内容，通过 jdk bin提供的插件</p>\n\n<p><img alt=\"image-20200706200739392\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724554552.png\" /></p>\n\n<p>《Java虚拟机规范》中对Java堆的描述是：所有的对象实例以及数组都应当在运行时分配在堆上。（The heap is the run-time data area from which memory for all class instances and arrays is allocated）</p>\n\n<p>我要说的是：&ldquo;几乎&rdquo;所有的对象实例都在这里分配内存。&mdash;从实际使用角度看的。</p>\n\n<ul>\n\t<li>因为还有一些对象是在栈上分配的</li>\n</ul>\n\n<p>数组和对象可能永远不会存储在栈上，因为栈帧中保存引用，这个引用指向对象或者数组在堆中的位置。</p>\n\n<p>在方法结束后，堆中的对象不会马上被移除，仅仅在垃圾收集的时候才会被移除。</p>\n\n<ul>\n\t<li>也就是触发了GC的时候，才会进行回收</li>\n\t<li>如果堆中对象马上被回收，那么用户线程就会收到影响，因为有stop the word</li>\n</ul>\n\n<p>堆，是GC（Garbage Collection，垃圾收集器）执行垃圾回收的重点区域。</p>\n\n<p><img alt=\"image-20200706201904057\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724554636.png\" /></p>\n\n<h3>堆内存细分</h3>\n\n<p>Java 7及之前堆内存逻辑上分为三部分：新生区+养老区+永久区</p>\n\n<ul>\n\t<li>Young Generation Space 新生区 Young/New 又被划分为Eden区和Survivor区</li>\n\t<li>Tenure generation space 养老区 Old/Tenure</li>\n\t<li>Permanent Space永久区 Perm</li>\n</ul>\n\n<p>Java 8及之后堆内存逻辑上分为三部分：新生区养老区+元空间</p>\n\n<ul>\n\t<li>Young Generation Space新生区 Young/New 又被划分为Eden区和Survivor区</li>\n\t<li>Tenure generation space 养老区 Old/Tenure</li>\n\t<li>Meta Space 元空间 Meta</li>\n</ul>\n\n<p>约定：新生区 -&gt; 新生代 -&gt; 年轻代 、 养老区 -&gt; 老年区 -&gt; 老年代、 永久区 -&gt; 永久代</p>\n\n<p><img alt=\"image-20200706203419496\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724554718.png\" /></p>\n\n<p>堆空间内部结构，JDK1.8之前从永久代 替换成 元空间</p>\n\n<p><img alt=\"image-20200706203835403\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724554846.png\" /></p>\n\n<h2>设置堆内存大小与OOM</h2>\n\n<p>Java堆区用于存储Java对象实例，那么堆的大小在JVM启动时就已经设定好了，大家可以通过选项&quot;-Xmx&quot;和&quot;-Xms&quot;来进行设置。</p>\n\n<ul>\n\t<li>&ldquo;-Xms&quot;用于表示堆区的起始内存，等价于-xx:InitialHeapSize</li>\n\t<li>&ldquo;-Xmx&quot;则用于表示堆区的最大内存，等价于-XX:MaxHeapSize</li>\n</ul>\n\n<p>一旦堆区中的内存大小超过&ldquo;-xmx&quot;所指定的最大内存时，将会抛出outofMemoryError异常。</p>\n\n<p>通常会将-Xms和-Xmx两个参数配置相同的值，其目的是<strong>为了能够在ava垃圾回收机制清理完堆区后不需要重新分隔计算堆区的大小，从而提高性能</strong>。</p>\n\n<p>默认情况下</p>\n\n<ul>\n\t<li>\n\t<p>初始内存大小：物理电脑内存大小/64</p>\n\t</li>\n\t<li>\n\t<p>最大内存大小：物理电脑内存大小/4</p>\n\t</li>\n</ul>\n\n<pre>\n<code class=\"language-java\">/**\n * -Xms 用来设置堆空间（年轻代+老年代）的初始内存大小\n *  -X：是jvm运行参数\n *  ms：memory start\n * -Xmx：用来设置堆空间（年轻代+老年代）的最大内存大小\n *\n * @author: 陌溪\n * @create: 2020-07-06-20:44\n */\npublic class HeapSpaceInitial {\n    public static void main(String[] args) {\n        // 返回Java虚拟机中的堆内存总量\n        long initialMemory = Runtime.getRuntime().totalMemory() / 1024 / 1024;\n        // 返回Java虚拟机试图使用的最大堆内存\n        long maxMemory = Runtime.getRuntime().maxMemory() / 1024 / 1024;\n        System.out.println(\"-Xms:\" + initialMemory + \"M\");\n        System.out.println(\"-Xmx:\" + maxMemory + \"M\");\n    }\n}\n</code></pre>\n\n<p>输出结果</p>\n\n<pre>\n<code>-Xms:245M\n-Xmx:3614M\n</code></pre>\n\n<p>如何查看堆内存的内存分配情况</p>\n\n<pre>\n<code>jps  -&gt;  jstat -gc 进程id\n</code></pre>\n\n<p><img alt=\"image-20200706205756045\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724554916.png\" /></p>\n\n<pre>\n<code>-XX:+PrintGCDetails\n</code></pre>\n\n<p><img alt=\"image-20200706205821919\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724554956.png\" /></p>\n\n<h3>OutOfMemory举例</h3>\n\n<p><img alt=\"image-20200706205947535\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724555016.png\" /></p>\n\n<p><img alt=\"image-20200706210000461\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724555079.png\" /></p>\n\n<p>我们简单的写一个OOM例子</p>\n\n<pre>\n<code class=\"language-java\">/**\n * OOM测试\n *\n * @author: 陌溪\n * @create: 2020-07-06-21:11\n */\npublic class OOMTest {\n    public static void main(String[] args) {\n        List&lt;Integer&gt; list = new ArrayList&lt;&gt;();\n        while(true) {\n            list.add(999999999);\n        }\n    }\n}\n\n</code></pre>\n\n<p>然后设置启动参数</p>\n\n<pre>\n<code>-Xms10m -Xmx:10m\n</code></pre>\n\n<p>运行后，就出现OOM了，那么我们可以通过 VisualVM这个工具查看具体是什么参数造成的OOM</p>\n\n<p><img alt=\"image-20200706211652779\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724555117.png\" /></p>\n\n<h2>年轻代与老年代</h2>\n\n<p>存储在JVM中的Java对象可以被划分为两类：</p>\n\n<ul>\n\t<li>一类是生命周期较短的瞬时对象，这类对象的创建和消亡都非常迅速\n\t<ul>\n\t\t<li>生命周期短的，及时回收即可</li>\n\t</ul>\n\t</li>\n\t<li>另外一类对象的生命周期却非常长，在某些极端的情况下还能够与JVM的生命周期保持一致</li>\n</ul>\n\n<p>Java堆区进一步细分的话，可以划分为年轻代（YoungGen）和老年代（oldGen）</p>\n\n<p>其中年轻代又可以划分为Eden空间、Survivor0空间和Survivor1空间（有时也叫做from区、to区）</p>\n\n<p><img alt=\"image-20200707075847954\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724555189.png\" /></p>\n\n<p>下面这参数开发中一般不会调：</p>\n\n<p><img alt=\"image-20200707080154039\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724555216.png\" /></p>\n\n<ul>\n\t<li>Eden：From：to -&gt; 8:1:1</li>\n\t<li>新生代：老年代 - &gt; 1 : 2</li>\n</ul>\n\n<p>配置新生代与老年代在堆结构的占比。</p>\n\n<ul>\n\t<li>\n\t<p>默认-XX:NewRatio=2，表示新生代占1，老年代占2，新生代占整个堆的1/3</p>\n\t</li>\n\t<li>\n\t<p>可以修改-XX:NewRatio=4，表示新生代占1，老年代占4，新生代占整个堆的1/5</p>\n\t</li>\n</ul>\n\n<blockquote>\n<p>当发现在整个项目中，生命周期长的对象偏多，那么就可以通过调整 老年代的大小，来进行调优</p>\n</blockquote>\n\n<p>在HotSpot中，Eden空间和另外两个survivor空间缺省所占的比例是8：1：1当然开发人员可以通过选项&ldquo;-xx:SurvivorRatio&rdquo;调整这个空间比例。比如-xx:SurvivorRatio=8</p>\n\n<p>几乎所有的Java对象都是在Eden区被new出来的。绝大部分的Java对象的销毁都在新生代进行了。（有些大的对象在Eden区无法存储时候，将直接进入老年代）</p>\n\n<blockquote>\n<p>IBM公司的专门研究表明，新生代中80%的对象都是&ldquo;朝生夕死&rdquo;的。</p>\n\n<p>可以使用选项&quot;-Xmn&quot;设置新生代最大内存大小</p>\n\n<p>这个参数一般使用默认值就可以了。</p>\n</blockquote>\n\n<p><img alt=\"image-20200707084208115\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724555289.png\" /></p>\n\n<h2>图解对象分配过程</h2>\n\n<h3>概念</h3>\n\n<p>为新对象分配内存是一件非常严谨和复杂的任务，JM的设计者们不仅需要考虑内存如何分配、在哪里分配等问题，并且由于内存分配算法与内存回收算法密切相关，所以还需要考虑GC执行完内存回收后是否会在内存空间中产生内存碎片。</p>\n\n<ul>\n\t<li>new的对象先放伊甸园区。此区有大小限制。</li>\n\t<li>当伊甸园的空间填满时，程序又需要创建对象，JVM的垃圾回收器将对伊甸园区进行垃圾回收（MinorGC），将伊甸园区中的不再被其他对象所引用的对象进行销毁。再加载新的对象放到伊甸园区</li>\n\t<li>然后将伊甸园中的剩余对象移动到幸存者0区。</li>\n\t<li>如果再次触发垃圾回收，此时上次幸存下来的放到幸存者0区的，如果没有回收，就会放到幸存者1区。</li>\n\t<li>如果再次经历垃圾回收，此时会重新放回幸存者0区，接着再去幸存者1区。</li>\n\t<li>啥时候能去养老区呢？可以设置次数。默认是15次。</li>\n\t<li>在养老区，相对悠闲。当养老区内存不足时，再次触发GC：Major GC，进行养老区的内存清理</li>\n\t<li>若养老区执行了Major GC之后，发现依然无法进行对象的保存，就会产生OOM异常。</li>\n</ul>\n\n<p>可以设置参数：-Xx:MaxTenuringThreshold= N进行设置</p>\n\n<h3>图解过程</h3>\n\n<p>我们创建的对象，一般都是存放在Eden区的，当我们Eden区满了后，就会触发GC操作，一般被称为 YGC / Minor GC操作</p>\n\n<p><img alt=\"image-20200707084714886\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724555316.png\" /></p>\n\n<p>当我们进行一次垃圾收集后，红色的将会被回收，而绿色的还会被占用着，存放在S0(Survivor From)区。同时我们给每个对象设置了一个年龄计数器，一次回收后就是1。</p>\n\n<p>同时Eden区继续存放对象，当Eden区再次存满的时候，又会触发一个MinorGC操作，此时GC将会把 Eden和Survivor From中的对象 进行一次收集，把存活的对象放到 Survivor To区，同时让年龄 + 1</p>\n\n<p><img alt=\"image-20200707085232646\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724555379.png\" /></p>\n\n<p>我们继续不断的进行对象生成 和 垃圾回收，当Survivor中的对象的年龄达到15的时候，将会触发一次 Promotion晋升的操作，也就是将年轻代中的对象 晋升到 老年代中</p>\n\n<p><img alt=\"image-20200707085737207\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724555416.png\" /></p>\n\n<h3>思考：幸存区区满了后？</h3>\n\n<p>特别注意，在Eden区满了的时候，才会触发MinorGC，而幸存者区满了后，不会触发MinorGC操作</p>\n\n<p>如果Survivor区满了后，将会触发一些特殊的规则，也就是可能直接晋升老年代</p>\n\n<blockquote>\n<p>举例：以当兵为例，正常人的晋升可能是 ： 新兵 -&gt; 班长 -&gt; 排长 -&gt; 连长</p>\n\n<p>但是也有可能有些人因为做了非常大的贡献，直接从 新兵 -&gt; 排长</p>\n</blockquote>\n\n<h3>对象分配的特殊情况</h3>\n\n<p><img alt=\"image-20200707091058346\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724555444.png\" /></p>\n\n<h3>代码演示对象分配过程</h3>\n\n<p>我们不断的创建大对象</p>\n\n<pre>\n<code class=\"language-java\">/**\n * 代码演示对象创建过程\n *\n * @author: 陌溪\n * @create: 2020-07-07-9:16\n */\npublic class HeapInstanceTest {\n    byte [] buffer = new byte[new Random().nextInt(1024 * 200)];\n    public static void main(String[] args) throws InterruptedException {\n        ArrayList&lt;HeapInstanceTest&gt; list = new ArrayList&lt;&gt;();\n        while (true) {\n            list.add(new HeapInstanceTest());\n            Thread.sleep(10);\n        }\n    }\n}\n</code></pre>\n\n<p>然后设置JVM参数</p>\n\n<pre>\n<code class=\"language-bash\">-Xms600m -Xmx600m\n</code></pre>\n\n<p>然后cmd输入下面命令，打开VisualVM图形化界面</p>\n\n<pre>\n<code>jvisualvm\n</code></pre>\n\n<p>然后通过执行上面代码，通过VisualGC进行动态化查看</p>\n\n<p><img alt=\"垃圾回收\" src=\"http://localhost:8600//blog/admin/gif/2020/10/15/1602724555783.gif\" /></p>\n\n<p>最终，在老年代和新生代都满了，就出现OOM</p>\n\n<pre>\n<code>Exception in thread \"main\" java.lang.OutOfMemoryError: Java heap space\n\tat com.atguigu.java.chapter08.HeapInstanceTest.&lt;init&gt;(HeapInstanceTest.java:13)\n\tat com.atguigu.java.chapter08.HeapInstanceTest.main(HeapInstanceTest.java:17)\n</code></pre>\n\n<h3>常用的调优工具</h3>\n\n<ul>\n\t<li>JDK命令行</li>\n\t<li>Eclipse：Memory Analyzer Tool</li>\n\t<li>Jconsole</li>\n\t<li>Visual VM（实时监控 推荐~）</li>\n\t<li>Jprofiler（推荐~）</li>\n\t<li>Java Flight Recorder（实时监控）</li>\n\t<li>GCViewer</li>\n\t<li>GCEasy</li>\n</ul>\n\n<h3>总结</h3>\n\n<ul>\n\t<li>针对幸存者s0，s1区的总结：复制之后有交换，谁空谁是to</li>\n\t<li>关于垃圾回收：频繁在新生区收集，很少在老年代收集，几乎不再永久代和元空间进行收集</li>\n\t<li>新生代采用复制算法的目的：是为了减少内碎片</li>\n</ul>\n\n<h2>Minor GC，MajorGC、Full GC</h2>\n\n<ul>\n\t<li>Minor GC：新生代的GC</li>\n\t<li>Major GC：老年代的GC</li>\n\t<li>Full GC：整堆收集，收集整个Java堆和方法区的垃圾收集</li>\n</ul>\n\n<blockquote>\n<p>我们都知道，JVM的调优的一个环节，也就是垃圾收集，我们需要尽量的避免垃圾回收，因为在垃圾回收的过程中，容易出现STW的问题</p>\n\n<p>而 Major GC 和 Full GC出现STW的时间，是Minor GC的10倍以上</p>\n</blockquote>\n\n<p>JVM在进行GC时，并非每次都对上面三个内存区域一起回收的，大部分时候回收的都是指新生代。针对Hotspot VM的实现，它里面的GC按照回收区域又分为两大种类型：一种是部分收集（Partial GC），一种是整堆收集（FullGC）</p>\n\n<p>部分收集：不是完整收集整个Java堆的垃圾收集。其中又分为：</p>\n\n<ul>\n\t<li>新生代收集（MinorGC/YoungGC）：只是新生代的垃圾收集</li>\n\t<li>老年代收集（MajorGC/o1dGC）：只是老年代的圾收集。\n\t<ul>\n\t\t<li>目前，只有CMSGC会有单独收集老年代的行为。</li>\n\t\t<li>注意，很多时候Major GC会和Fu11GC混淆使用，需要具体分辨是老年代回收还是整堆回收。</li>\n\t</ul>\n\t</li>\n\t<li>混合收集（MixedGC）：收集整个新生代以及部分老年代的垃圾收集。\n\t<ul>\n\t\t<li>目前，只有G1 GC会有这种行为</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>整堆收集（FullGC）：收集整个java堆和方法区的垃圾收集。</p>\n\n<h3>Minor GC</h3>\n\n<p>当年轻代空间不足时，就会触发MinorGC，这里的年轻代满指的是Eden代满，Survivor满不会引发GC。（每次Minor GC会清理年轻代的内存。）</p>\n\n<p>因为Java对象大多都具备 <strong>朝生夕灭</strong> 的特性，所以Minor GC非常频繁，一般回收速度也比较快。这一定义既清晰又易于理解。</p>\n\n<p>Minor GC会引发STW，暂停其它用户的线程，等垃圾回收结束，用户线程才恢复运行</p>\n\n<blockquote>\n<p>STW：stop the word</p>\n</blockquote>\n\n<p><img alt=\"image-20200707095606813\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724555516.png\" /></p>\n\n<h3>Major GC</h3>\n\n<p>指发生在老年代的GC，对象从老年代消失时，我们说 &ldquo;Major Gc&rdquo; 或 &ldquo;Full GC&rdquo; 发生了</p>\n\n<p>出现了MajorGc，经常会伴随至少一次的Minor GC（但非绝对的，在Paralle1 Scavenge收集器的收集策略里就有直接进行MajorGC的策略选择过程）</p>\n\n<ul>\n\t<li>也就是在老年代空间不足时，会先尝试触发MinorGc。如果之后空间还不足，则触发Major GC</li>\n</ul>\n\n<p>Major GC的速度一般会比MinorGc慢1e倍以上，STW的时间更长，如果Major GC后，内存还不足，就报OOM了</p>\n\n<h3>Full GC</h3>\n\n<p>触发Fu11GC执行的情况有如下五种：</p>\n\n<ul>\n\t<li>调用System.gc（）时，系统建议执行Fu11GC，但是不必然执行</li>\n\t<li>老年代空间不足</li>\n\t<li>方法区空间不足</li>\n\t<li>通过Minor GC后进入老年代的平均大小大于老年代的可用内存</li>\n\t<li>由Eden区、survivor spacee（From Space）区向survivor spacel（To Space）区复制时，对象大小大于To Space可用内存，则把该对象转存到老年代，且老年代的可用内存小于该对象大小</li>\n</ul>\n\n<p>说明：Full GC 是开发或调优中尽量要避免的。这样暂时时间会短一些</p>\n\n<h3>GC 举例</h3>\n\n<p>我们编写一个OOM的异常，因为我们在不断的创建字符串，是存放在元空间的</p>\n\n<pre>\n<code class=\"language-java\">/**\n * GC测试\n *\n * @author: 陌溪\n * @create: 2020-07-07-10:01\n */\npublic class GCTest {\n    public static void main(String[] args) {\n        int i = 0;\n        try {\n            List&lt;String&gt; list = new ArrayList&lt;&gt;();\n            String a = \"mogu blog\";\n            while(true) {\n                list.add(a);\n                a = a + a;\n                i++;\n            }\n        }catch (Exception e) {\n            e.getStackTrace();\n        }\n    }\n}\n</code></pre>\n\n<p>设置JVM启动参数</p>\n\n<pre>\n<code class=\"language-bash\">-Xms10m -Xmx10m -XX:+PrintGCDetails\n</code></pre>\n\n<p>打印出的日志</p>\n\n<pre>\n<code>[GC (Allocation Failure) [PSYoungGen: 2038K-&gt;500K(2560K)] 2038K-&gt;797K(9728K), 0.3532002 secs] [Times: user=0.01 sys=0.00, real=0.36 secs] \n[GC (Allocation Failure) [PSYoungGen: 2108K-&gt;480K(2560K)] 2405K-&gt;1565K(9728K), 0.0014069 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n[Full GC (Ergonomics) [PSYoungGen: 2288K-&gt;0K(2560K)] [ParOldGen: 6845K-&gt;5281K(7168K)] 9133K-&gt;5281K(9728K), [Metaspace: 3482K-&gt;3482K(1056768K)], 0.0058675 secs] [Times: user=0.00 sys=0.00, real=0.01 secs] \n[GC (Allocation Failure) [PSYoungGen: 0K-&gt;0K(2560K)] 5281K-&gt;5281K(9728K), 0.0002857 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n[Full GC (Allocation Failure) [PSYoungGen: 0K-&gt;0K(2560K)] [ParOldGen: 5281K-&gt;5263K(7168K)] 5281K-&gt;5263K(9728K), [Metaspace: 3482K-&gt;3482K(1056768K)], 0.0058564 secs] [Times: user=0.00 sys=0.00, real=0.01 secs] \nHeap\n PSYoungGen      total 2560K, used 60K [0x00000000ffd00000, 0x0000000100000000, 0x0000000100000000)\n  eden space 2048K, 2% used [0x00000000ffd00000,0x00000000ffd0f138,0x00000000fff00000)\n  from space 512K, 0% used [0x00000000fff00000,0x00000000fff00000,0x00000000fff80000)\n  to   space 512K, 0% used [0x00000000fff80000,0x00000000fff80000,0x0000000100000000)\n ParOldGen       total 7168K, used 5263K [0x00000000ff600000, 0x00000000ffd00000, 0x00000000ffd00000)\n  object space 7168K, 73% used [0x00000000ff600000,0x00000000ffb23cf0,0x00000000ffd00000)\n Metaspace       used 3514K, capacity 4498K, committed 4864K, reserved 1056768K\n  class space    used 388K, capacity 390K, committed 512K, reserved 1048576K\n  \n  Exception in thread \"main\" java.lang.OutOfMemoryError: Java heap space\n\tat java.util.Arrays.copyOfRange(Arrays.java:3664)\n\tat java.lang.String.&lt;init&gt;(String.java:207)\n\tat java.lang.StringBuilder.toString(StringBuilder.java:407)\n\tat com.atguigu.java.chapter08.GCTest.main(GCTest.java:20)\n</code></pre>\n\n<p>触发OOM的时候，一定是进行了一次Full GC，因为只有在老年代空间不足时候，才会爆出OOM异常</p>\n\n<h2>堆空间分代思想</h2>\n\n<p>为什么要把Java堆分代？不分代就不能正常工作了吗？经研究，不同对象的生命周期不同。70%-99%的对象是临时对象。</p>\n\n<blockquote>\n<p>新生代：有Eden、两块大小相同的survivor（又称为from/to，s0/s1）构成，to总为空。 老年代：存放新生代中经历多次GC仍然存活的对象。</p>\n</blockquote>\n\n<p><img alt=\"image-20200707101511025\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724555544.png\" /></p>\n\n<p>其实不分代完全可以，分代的唯一理由就是优化GC性能。如果没有分代，那所有的对象都在一块，就如同把一个学校的人都关在一个教室。GC的时候要找到哪些对象没用，这样就会对堆的所有区域进行扫描。而很多对象都是朝生夕死的，如果分代的话，把新创建的对象放到某一地方，当GC的时候先把这块存储&ldquo;朝生夕死&rdquo;对象的区域进行回收，这样就会腾出很大的空间出来。</p>\n\n<p><img alt=\"image-20200707101543871\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724555572.png\" /></p>\n\n<h2>内存分配策略</h2>\n\n<p>如果对象在Eden出生并经过第一次Minor GC后仍然存活，并且能被Survivor容纳的话，将被移动到survivor空间中，并将对象年龄设为1。对象在survivor区中每熬过一次MinorGC，年龄就增加1岁，当它的年龄增加到一定程度（默认为15岁，其实每个JVM、每个GC都有所不同）时，就会被晋升到老年代</p>\n\n<p>对象晋升老年代的年龄阀值，可以通过选项-xx:MaxTenuringThreshold来设置</p>\n\n<p>针对不同年龄段的对象分配原则如下所示：</p>\n\n<ul>\n\t<li>优先分配到Eden\n\t<ul>\n\t\t<li>开发中比较长的字符串或者数组，会直接存在老年代，但是因为新创建的对象 都是 朝生夕死的，所以这个大对象可能也很快被回收，但是因为老年代触发Major GC的次数比 Minor GC要更少，因此可能回收起来就会比较慢</li>\n\t</ul>\n\t</li>\n\t<li>大对象直接分配到老年代\n\t<ul>\n\t\t<li>尽量避免程序中出现过多的大对象</li>\n\t</ul>\n\t</li>\n\t<li>长期存活的对象分配到老年代</li>\n\t<li>动态对象年龄判断\n\t<ul>\n\t\t<li>如果survivor区中相同年龄的所有对象大小的总和大于Survivor空间的一半，年龄大于或等于该年龄的对象可以直接进入老年代，无须等到MaxTenuringThreshold 中要求的年龄。</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>空间分配担保： -Xx:HandlePromotionFailure</p>\n\n<ul>\n\t<li>也就是经过Minor GC后，所有的对象都存活，因为Survivor比较小，所以就需要将Survivor无法容纳的对象，存放到老年代中。</li>\n</ul>\n\n<h2>为对象分配内存：TLAB</h2>\n\n<h3>问题：堆空间都是共享的么？</h3>\n\n<p>不一定，因为还有TLAB这个概念，在堆中划分出一块区域，为每个线程所独占</p>\n\n<h3>为什么有TLAB？</h3>\n\n<p>TLAB：Thread Local Allocation Buffer，也就是为每个线程单独分配了一个缓冲区</p>\n\n<p>堆区是线程共享区域，任何线程都可以访问到堆区中的共享数据</p>\n\n<p>由于对象实例的创建在JVM中非常频繁，因此在并发环境下从堆区中划分内存空间是线程不安全的</p>\n\n<p>为避免多个线程操作同一地址，需要使用加锁等机制，进而影响分配速度。</p>\n\n<h3>什么是TLAB</h3>\n\n<p>从内存模型而不是垃圾收集的角度，对Eden区域继续进行划分，JVM为每个线程分配了一个私有缓存区域，它包含在Eden空间内。</p>\n\n<p>多线程同时分配内存时，使用TLAB可以避免一系列的非线程安全问题，同时还能够提升内存分配的吞吐量，因此我们可以将这种内存分配方式称之为快速分配策略。</p>\n\n<p>据我所知所有OpenJDK衍生出来的JVM都提供了TLAB的设计。</p>\n\n<p><img alt=\"image-20200707103547712\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724555600.png\" /></p>\n\n<p>尽管不是所有的对象实例都能够在TLAB中成功分配内存，但JVM确实是将TLAB作为内存分配的首选。</p>\n\n<p>在程序中，开发人员可以通过选项&ldquo;-Xx:UseTLAB&rdquo;设置是否开启TLAB空间。</p>\n\n<p>默认情况下，TLAB空间的内存非常小，仅占有整个Eden空间的1，当然我们可以通过选项&ldquo;-Xx:TLABWasteTargetPercent&rdquo;设置TLAB空间所占用Eden空间的百分比大小。</p>\n\n<p>一旦对象在TLAB空间分配内存失败时，JVM就会尝试着通过使用加锁机制确保数据操作的原子性，从而直接在Eden空间中分配内存。</p>\n\n<h3>TLAB分配过程</h3>\n\n<p>对象首先是通过TLAB开辟空间，如果不能放入，那么需要通过Eden来进行分配</p>\n\n<p><img alt=\"image-20200707104253530\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724555628.png\" /></p>\n\n<h2>小结：堆空间的参数设置</h2>\n\n<ul>\n\t<li>\n\t<p>-XX：+PrintFlagsInitial：查看所有的参数的默认初始值</p>\n\t</li>\n\t<li>\n\t<p>-XX：+PrintFlagsFinal：查看所有的参数的最终值（可能会存在修改，不再是初始值）</p>\n\t</li>\n\t<li>\n\t<p>-Xms：初始堆空间内存（默认为物理内存的1/64）</p>\n\t</li>\n\t<li>\n\t<p>-Xmx：最大堆空间内存（默认为物理内存的1/4）</p>\n\t</li>\n\t<li>\n\t<p>-Xmn：设置新生代的大小。（初始值及最大值）</p>\n\t</li>\n\t<li>\n\t<p>-XX:NewRatio：配置新生代与老年代在堆结构的占比</p>\n\t</li>\n\t<li>\n\t<p>-XX:SurvivorRatio：设置新生代中Eden和S0/S1空间的比例</p>\n\t</li>\n\t<li>\n\t<p>-XX:MaxTenuringThreshold：设置新生代垃圾的最大年龄</p>\n\t</li>\n\t<li>\n\t<p>-XX：+PrintGCDetails：输出详细的GC处理日志</p>\n\n\t<ul>\n\t\t<li>打印gc简要信息：①-Xx：+PrintGC ② - verbose:gc</li>\n\t</ul>\n\t</li>\n\t<li>\n\t<p>-XX:HandlePromotionFalilure：是否设置空间分配担保</p>\n\t</li>\n</ul>\n\n<p>在发生Minor GC之前，虚拟机会检查老年代最大可用的连续空间是否大于新生代所有对象的总空间。I</p>\n\n<ul>\n\t<li>如果大于，则此次Minor GC是安全的</li>\n\t<li>如果小于，则虚拟机会查看-xx:HandlePromotionFailure设置值是否允担保失败。\n\t<ul>\n\t\t<li>如果HandlePromotionFailure=true，那么会继续检查老年代最大可用连续空间是否大于历次晋升到老年代的对象的平均大小。</li>\n\t\t<li>如果大于，则尝试进行一次Minor GC，但这次Minor GC依然是有风险的；</li>\n\t\t<li>如果小于，则改为进行一次FullGC。</li>\n\t\t<li>如果HandlePromotionFailure=false，则改为进行一次Ful1 Gc。</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>在JDK6 Update24之后，HandlePromotionFailure参数不会再影响到虚拟机的空间分配担保策略，观察openJDK中的源码变化，虽然源码中还定义了HandlePromotionFailure参数，但是在代码中已经不会再使用它。JDK6 Update 24之后的规则变为只要老年代的连续空间大于新生代对象总大小或者历次晋升的平均大小就会进行Minor GC，否则将进行FullGC。</p>\n\n<h2>堆是分配对象的唯一选择么？</h2>\n\n<h3>逃逸分析</h3>\n\n<p>在《深入理解Java虚拟机》中关于Java堆内存有这样一段描述：</p>\n\n<p>随着JIT编译期的发展与逃逸分析技术逐渐成熟，栈上分配、标量替换优化技术将会导致一些微妙的变化，所有的对象都分配到堆上也渐渐变得不那么&ldquo;绝对&rdquo;了。</p>\n\n<p>在Java虚拟机中，对象是在Java堆中分配内存的，这是一个普遍的常识。但是，有一种特殊情况，那就是如果经过逃逸分析（Escape Analysis）后发现，一个对象并没有逃逸出方法的话，那么就可能被优化成栈上分配。这样就无需在堆上分配内存，也无须进行垃圾回收了。这也是最常见的堆外存储技术。</p>\n\n<p>此外，前面提到的基于openJDk深度定制的TaoBaovm，其中创新的GCIH（GC invisible heap）技术实现off-heap，将生命周期较长的Java对象从heap中移至heap外，并且GC不能管理GCIH内部的Java对象，以此达到降低GC的回收频率和提升GC的回收效率的目的。</p>\n\n<p>如何将堆上的对象分配到栈，需要使用逃逸分析手段。</p>\n\n<p>这是一种可以有效减少Java程序中同步负载和内存堆分配压力的跨函数全局数据流分析算法。通过逃逸分析，Java Hotspot编译器能够分析出一个新的对象的引用的使用范围从而决定是否要将这个对象分配到堆上。逃逸分析的基本行为就是分析对象动态作用域：</p>\n\n<ul>\n\t<li>当一个对象在方法中被定义后，对象只在方法内部使用，则认为没有发生逃逸。</li>\n\t<li>当一个对象在方法中被定义后，它被外部方法所引用，则认为发生逃逸。例如作为调用参数传递到其他地方中。</li>\n</ul>\n\n<h4>逃逸分析举例</h4>\n\n<p>没有发生逃逸的对象，则可以分配到栈上，随着方法执行的结束，栈空间就被移除，每个栈里面包含了很多栈帧，也就是发生逃逸分析</p>\n\n<pre>\n<code class=\"language-java\">public void my_method() {\n    V v = new V();\n    // use v\n    // ....\n    v = null;\n}\n</code></pre>\n\n<p>针对下面的代码</p>\n\n<pre>\n<code class=\"language-java\">public static StringBuffer createStringBuffer(String s1, String s2) {\n    StringBuffer sb = new StringBuffer();\n    sb.append(s1);\n    sb.append(s2);\n    return sb;\n}\n</code></pre>\n\n<p>如果想要StringBuffer sb不发生逃逸，可以这样写</p>\n\n<pre>\n<code class=\"language-java\">public static String createStringBuffer(String s1, String s2) {\n    StringBuffer sb = new StringBuffer();\n    sb.append(s1);\n    sb.append(s2);\n    return sb.toString();\n}\n</code></pre>\n\n<p>完整的逃逸分析代码举例</p>\n\n<pre>\n<code class=\"language-java\">/**\n * 逃逸分析\n * 如何快速的判断是否发生了逃逸分析，大家就看new的对象是否在方法外被调用。\n * @author: 陌溪\n * @create: 2020-07-07-20:05\n */\npublic class EscapeAnalysis {\n\n    public EscapeAnalysis obj;\n\n    /**\n     * 方法返回EscapeAnalysis对象，发生逃逸\n     * @return\n     */\n    public EscapeAnalysis getInstance() {\n        return obj == null ? new EscapeAnalysis():obj;\n    }\n\n    /**\n     * 为成员属性赋值，发生逃逸\n     */\n    public void setObj() {\n        this.obj = new EscapeAnalysis();\n    }\n\n    /**\n     * 对象的作用于仅在当前方法中有效，没有发生逃逸\n     */\n    public void useEscapeAnalysis() {\n        EscapeAnalysis e = new EscapeAnalysis();\n    }\n\n    /**\n     * 引用成员变量的值，发生逃逸\n     */\n    public void useEscapeAnalysis2() {\n        EscapeAnalysis e = getInstance();\n        // getInstance().XXX  发生逃逸\n    }\n}\n</code></pre>\n\n<h4>参数设置</h4>\n\n<p>在JDK 1.7 版本之后，HotSpot中默认就已经开启了逃逸分析</p>\n\n<p>如果使用的是较早的版本，开发人员则可以通过：</p>\n\n<ul>\n\t<li>选项&ldquo;-xx：+DoEscapeAnalysis&quot;显式开启逃逸分析</li>\n\t<li>通过选项&ldquo;-xx：+PrintEscapeAnalysis&quot;查看逃逸分析的筛选结果</li>\n</ul>\n\n<h4>结论</h4>\n\n<p>开发中能使用局部变量的，就不要使用在方法外定义。</p>\n\n<p>使用逃逸分析，编译器可以对代码做如下优化：</p>\n\n<ul>\n\t<li>栈上分配：将堆分配转化为栈分配。如果一个对象在子程序中被分配，要使指向该对象的指针永远不会发生逃逸，对象可能是栈上分配的候选，而不是堆上分配</li>\n\t<li>同步省略：如果一个对象被发现只有一个线程被访问到，那么对于这个对象的操作可以不考虑同步。</li>\n\t<li>分离对象或标量替换：有的对象可能不需要作为一个连续的内存结构存在也可以被访问到，那么对象的部分（或全部）可以不存储在内存，而是存储在CPU寄存器中。</li>\n</ul>\n\n<h3>栈上分配</h3>\n\n<p>JIT编译器在编译期间根据逃逸分析的结果，发现如果一个对象并没有逃逸出方法的话，就可能被优化成栈上分配。分配完成后，继续在调用栈内执行，最后线程结束，栈空间被回收，局部变量对象也被回收。这样就无须进行垃圾回收了。</p>\n\n<p>常见的栈上分配的场景</p>\n\n<blockquote>\n<p>在逃逸分析中，已经说明了。分别是给成员变量赋值、方法返回值、实例引用传递。</p>\n</blockquote>\n\n<h4>举例</h4>\n\n<p>我们通过举例来说明 开启逃逸分析 和 未开启逃逸分析时候的情况</p>\n\n<pre>\n<code class=\"language-java\">/**\n * 栈上分配\n * -Xmx1G -Xms1G -XX:-DoEscapeAnalysis -XX:+PrintGCDetails\n * @author: 陌溪\n * @create: 2020-07-07-20:23\n */\nclass User {\n    private String name;\n    private String age;\n    private String gender;\n    private String phone;\n}\npublic class StackAllocation {\n    public static void main(String[] args) throws InterruptedException {\n        long start = System.currentTimeMillis();\n        for (int i = 0; i &lt; 100000000; i++) {\n            alloc();\n        }\n        long end = System.currentTimeMillis();\n        System.out.println(\"花费的时间为：\" + (end - start) + \" ms\");\n\n        // 为了方便查看堆内存中对象个数，线程sleep\n        Thread.sleep(10000000);\n    }\n\n    private static void alloc() {\n        User user = new User();\n    }\n}\n</code></pre>\n\n<p>设置JVM参数，表示未开启逃逸分析</p>\n\n<pre>\n<code>-Xmx1G -Xms1G -XX:-DoEscapeAnalysis -XX:+PrintGCDetails\n</code></pre>\n\n<p>运行结果，同时还触发了GC操作</p>\n\n<pre>\n<code>花费的时间为：664 ms\n</code></pre>\n\n<p>然后查看内存的情况，发现有大量的User存储在堆中</p>\n\n<p><img alt=\"image-20200707203038615\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724555657.png\" /></p>\n\n<p>我们在开启逃逸分析</p>\n\n<pre>\n<code>-Xmx1G -Xms1G -XX:+DoEscapeAnalysis -XX:+PrintGCDetails\n</code></pre>\n\n<p>然后查看运行时间，我们能够发现花费的时间快速减少，同时不会发生GC操作</p>\n\n<pre>\n<code>花费的时间为：5 ms\n</code></pre>\n\n<p>然后在看内存情况，我们发现只有很少的User对象，说明User发生了逃逸，因为他们存储在栈中，随着栈的销毁而消失</p>\n\n<p><img alt=\"image-20200707203441718\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724555684.png\" /></p>\n\n<h3>同步省略</h3>\n\n<p>线程同步的代价是相当高的，同步的后果是降低并发性和性能。</p>\n\n<p>在动态编译同步块的时候，JIT编译器可以借助逃逸分析来判断同步块所使用的锁对象是否只能够被一个线程访问而没有被发布到其他线程。如果没有，那么JIT编译器在编译这个同步块的时候就会取消对这部分代码的同步。这样就能大大提高并发性和性能。这个取消同步的过程就叫同步省略，也叫锁消除。</p>\n\n<p>例如下面的代码</p>\n\n<pre>\n<code class=\"language-java\">public void f() {\n    Object hellis = new Object();\n    synchronized(hellis) {\n        System.out.println(hellis);\n    }\n}\n</code></pre>\n\n<p>代码中对hellis这个对象加锁，但是hellis对象的生命周期只在f()方法中，并不会被其他线程所访问到，所以在JIT编译阶段就会被优化掉，优化成：</p>\n\n<pre>\n<code class=\"language-java\">public void f() {\n    Object hellis = new Object();\n\tSystem.out.println(hellis);\n}\n</code></pre>\n\n<p>我们将其转换成字节码</p>\n\n<p><img alt=\"image-20200707205634266\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724555745.png\" /></p>\n\n<h3>分离对象和标量替换</h3>\n\n<p>标量（scalar）是指一个无法再分解成更小的数据的数据。Java中的原始数据类型就是标量。</p>\n\n<p>相对的，那些还可以分解的数据叫做聚合量（Aggregate），Java中的对象就是聚合量，因为他可以分解成其他聚合量和标量。</p>\n\n<p>在JIT阶段，如果经过逃逸分析，发现一个对象不会被外界访问的话，那么经过J工T优化，就会把这个对象拆解成若干个其中包含的若干个成员变量来代替。这个过程就是标量替换。</p>\n\n<pre>\n<code class=\"language-java\">public static void main(String args[]) {\n    alloc();\n}\nclass Point {\n    private int x;\n    private int y;\n}\nprivate static void alloc() {\n    Point point = new Point(1,2);\n    System.out.println(\"point.x\" + point.x + \";point.y\" + point.y);\n}\n</code></pre>\n\n<p>以上代码，经过标量替换后，就会变成</p>\n\n<pre>\n<code class=\"language-java\">private static void alloc() {\n    int x = 1;\n    int y = 2;\n    System.out.println(\"point.x = \" + x + \"; point.y=\" + y);\n}\n</code></pre>\n\n<p>可以看到，Point这个聚合量经过逃逸分析后，发现他并没有逃逸，就被替换成两个聚合量了。那么标量替换有什么好处呢？就是可以大大减少堆内存的占用。因为一旦不需要创建对象了，那么就不再需要分配堆内存了。 标量替换为栈上分配提供了很好的基础。</p>\n\n<h3>代码优化之标量替换</h3>\n\n<p>上述代码在主函数中进行了1亿次alloc。调用进行对象创建，由于User对象实例需要占据约16字节的空间，因此累计分配空间达到将近1.5GB。如果堆空间小于这个值，就必然会发生GC。使用如下参数运行上述代码：</p>\n\n<pre>\n<code class=\"language-bash\">-server -Xmx100m -Xms100m -XX:+DoEscapeAnalysis -XX:+PrintGC -XX:+EliminateAllocations\n</code></pre>\n\n<p>这里设置参数如下：</p>\n\n<ul>\n\t<li>参数-server：启动Server模式，因为在server模式下，才可以启用逃逸分析。</li>\n\t<li>参数-XX:+DoEscapeAnalysis：启用逃逸分析</li>\n\t<li>参数-Xmx10m：指定了堆空间最大为10MB</li>\n\t<li>参数-XX:+PrintGC：将打印Gc日志。</li>\n\t<li>参数一xx：+EliminateAllocations：开启了标量替换（默认打开），允许将对象打散分配在栈上，比如对象拥有id和name两个字段，那么这两个字段将会被视为两个独立的局部变量进行分配</li>\n</ul>\n\n<h3>逃逸分析的不足</h3>\n\n<p>关于逃逸分析的论文在1999年就已经发表了，但直到JDK1.6才有实现，而且这项技术到如今也并不是十分成熟的。</p>\n\n<p>其根本原因就是无法保证逃逸分析的性能消耗一定能高于他的消耗。虽然经过逃逸分析可以做标量替换、栈上分配、和锁消除。但是逃逸分析自身也是需要进行一系列复杂的分析的，这其实也是一个相对耗时的过程。 一个极端的例子，就是经过逃逸分析之后，发现没有一个对象是不逃逸的。那这个逃逸分析的过程就白白浪费掉了。</p>\n\n<p>虽然这项技术并不十分成熟，但是它也是即时编译器优化技术中一个十分重要的手段。注意到有一些观点，认为通过逃逸分析，JVM会在栈上分配那些不会逃逸的对象，这在理论上是可行的，但是取决于JvM设计者的选择。据我所知，oracle Hotspot JVM中并未这么做，这一点在逃逸分析相关的文档里已经说明，所以可以明确所有的对象实例都是创建在堆上。</p>\n\n<p>目前很多书籍还是基于JDK7以前的版本，JDK已经发生了很大变化，intern字符串的缓存和静态变量曾经都被分配在永久代上，而永久代已经被元数据区取代。但是，intern字符串缓存和静态变量并不是被转移到元数据区，而是直接在堆上分配，所以这一点同样符合前面一点的结论：对象实例都是分配在堆上。</p>\n\n<h2>小结</h2>\n\n<p>年轻代是对象的诞生、成长、消亡的区域，一个对象在这里产生、应用，最后被垃圾回收器收集、结束生命。</p>\n\n<p>老年代放置长生命周期的对象，通常都是从survivor区域筛选拷贝过来的Java对象。当然，也有特殊情况，我们知道普通的对象会被分配在TLAB上；如果对象较大，JVM会试图直接分配在Eden其他位置上；如果对象太大，完全无法在新生代找到足够长的连续空闲空间，JVM就会直接分配到老年代。当GC只发生在年轻代中，回收年轻代对象的行为被称为MinorGc。</p>\n\n<p>当GC发生在老年代时则被称为MajorGc或者FullGC。一般的，MinorGc的发生频率要比MajorGC高很多，即老年代中垃圾回收发生的频率将大大低于年轻代。</p>\n",
      "tagUid": "5626932d452c2ad863d9b3cb0b69d22d",
      "clickCount": 91,
      "collectCount": 0,
      "fileUid": "http://azhe.oss-cn-beijing.aliyuncs.com/FerryMan/20210605174522476.jpg",
      "status": true,
      "createTime": "2020-10-15 17:16:54",
      "updateTime": "2022-05-16 22:59:53",
      "adminUid": "1f01cd1d2f474743b241d74008b12333",
      "isOriginal": "1",
      "author": "admin",
      "articlesPart": "博客",
      "typeId": "2",
      "typeName": "后端技术",
      "level": false,
      "isPublish": "1",
      "sort": 0,
      "openComment": true,
      "type": false,
      "outsideLink": null,
      "userUid": "1401086531753611264",
      "articleSource": false,
      "createBy": null,
      "lastUpdateBy": "admin"
    },
    {
      "id": "062ca3475e8193a4a81853a4bf41a8fa",
      "oid": 2,
      "title": "JVM堆",
      "summary": "JVM堆",
      "content": "<h1>堆</h1>\n\n<h2>堆的核心概念</h2>\n\n<p>堆针对一个JVM进程来说是唯一的，也就是一个进程只有一个JVM，但是进程包含多个线程，他们是共享同一堆空间的。</p>\n\n<p><img alt=\"image-20200706195127740\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724553658.png\" /></p>\n\n<p>一个JVM实例只存在一个堆内存，堆也是Java内存管理的核心区域。</p>\n\n<p>Java堆区在JVM启动的时候即被创建，其空间大小也就确定了。是JVM管理的最大一块内存空间。</p>\n\n<ul>\n\t<li>堆内存的大小是可以调节的。</li>\n</ul>\n\n<p>《Java虚拟机规范》规定，堆可以处于物理上不连续的内存空间中，但在逻辑上它应该被视为连续的。</p>\n\n<p>所有的线程共享Java堆，在这里还可以划分线程私有的缓冲区（Thread Local Allocation Buffer，TLAB）。</p>\n\n<blockquote>\n<p>-Xms10m：最小堆内存</p>\n\n<p>-Xmx10m：最大堆内存</p>\n</blockquote>\n\n<p>下图就是使用：Java VisualVM查看堆空间的内容，通过 jdk bin提供的插件</p>\n\n<p><img alt=\"image-20200706200739392\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724554552.png\" /></p>\n\n<p>《Java虚拟机规范》中对Java堆的描述是：所有的对象实例以及数组都应当在运行时分配在堆上。（The heap is the run-time data area from which memory for all class instances and arrays is allocated）</p>\n\n<p>我要说的是：&ldquo;几乎&rdquo;所有的对象实例都在这里分配内存。&mdash;从实际使用角度看的。</p>\n\n<ul>\n\t<li>因为还有一些对象是在栈上分配的</li>\n</ul>\n\n<p>数组和对象可能永远不会存储在栈上，因为栈帧中保存引用，这个引用指向对象或者数组在堆中的位置。</p>\n\n<p>在方法结束后，堆中的对象不会马上被移除，仅仅在垃圾收集的时候才会被移除。</p>\n\n<ul>\n\t<li>也就是触发了GC的时候，才会进行回收</li>\n\t<li>如果堆中对象马上被回收，那么用户线程就会收到影响，因为有stop the word</li>\n</ul>\n\n<p>堆，是GC（Garbage Collection，垃圾收集器）执行垃圾回收的重点区域。</p>\n\n<p><img alt=\"image-20200706201904057\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724554636.png\" /></p>\n\n<h3>堆内存细分</h3>\n\n<p>Java 7及之前堆内存逻辑上分为三部分：新生区+养老区+永久区</p>\n\n<ul>\n\t<li>Young Generation Space 新生区 Young/New 又被划分为Eden区和Survivor区</li>\n\t<li>Tenure generation space 养老区 Old/Tenure</li>\n\t<li>Permanent Space永久区 Perm</li>\n</ul>\n\n<p>Java 8及之后堆内存逻辑上分为三部分：新生区养老区+元空间</p>\n\n<ul>\n\t<li>Young Generation Space新生区 Young/New 又被划分为Eden区和Survivor区</li>\n\t<li>Tenure generation space 养老区 Old/Tenure</li>\n\t<li>Meta Space 元空间 Meta</li>\n</ul>\n\n<p>约定：新生区 -&gt; 新生代 -&gt; 年轻代 、 养老区 -&gt; 老年区 -&gt; 老年代、 永久区 -&gt; 永久代</p>\n\n<p><img alt=\"image-20200706203419496\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724554718.png\" /></p>\n\n<p>堆空间内部结构，JDK1.8之前从永久代 替换成 元空间</p>\n\n<p><img alt=\"image-20200706203835403\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724554846.png\" /></p>\n\n<h2>设置堆内存大小与OOM</h2>\n\n<p>Java堆区用于存储Java对象实例，那么堆的大小在JVM启动时就已经设定好了，大家可以通过选项&quot;-Xmx&quot;和&quot;-Xms&quot;来进行设置。</p>\n\n<ul>\n\t<li>&ldquo;-Xms&quot;用于表示堆区的起始内存，等价于-xx:InitialHeapSize</li>\n\t<li>&ldquo;-Xmx&quot;则用于表示堆区的最大内存，等价于-XX:MaxHeapSize</li>\n</ul>\n\n<p>一旦堆区中的内存大小超过&ldquo;-xmx&quot;所指定的最大内存时，将会抛出outofMemoryError异常。</p>\n\n<p>通常会将-Xms和-Xmx两个参数配置相同的值，其目的是<strong>为了能够在ava垃圾回收机制清理完堆区后不需要重新分隔计算堆区的大小，从而提高性能</strong>。</p>\n\n<p>默认情况下</p>\n\n<ul>\n\t<li>\n\t<p>初始内存大小：物理电脑内存大小/64</p>\n\t</li>\n\t<li>\n\t<p>最大内存大小：物理电脑内存大小/4</p>\n\t</li>\n</ul>\n\n<pre>\n<code class=\"language-java\">/**\n * -Xms 用来设置堆空间（年轻代+老年代）的初始内存大小\n *  -X：是jvm运行参数\n *  ms：memory start\n * -Xmx：用来设置堆空间（年轻代+老年代）的最大内存大小\n *\n * @author: 陌溪\n * @create: 2020-07-06-20:44\n */\npublic class HeapSpaceInitial {\n    public static void main(String[] args) {\n        // 返回Java虚拟机中的堆内存总量\n        long initialMemory = Runtime.getRuntime().totalMemory() / 1024 / 1024;\n        // 返回Java虚拟机试图使用的最大堆内存\n        long maxMemory = Runtime.getRuntime().maxMemory() / 1024 / 1024;\n        System.out.println(\"-Xms:\" + initialMemory + \"M\");\n        System.out.println(\"-Xmx:\" + maxMemory + \"M\");\n    }\n}\n</code></pre>\n\n<p>输出结果</p>\n\n<pre>\n<code>-Xms:245M\n-Xmx:3614M\n</code></pre>\n\n<p>如何查看堆内存的内存分配情况</p>\n\n<pre>\n<code>jps  -&gt;  jstat -gc 进程id\n</code></pre>\n\n<p><img alt=\"image-20200706205756045\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724554916.png\" /></p>\n\n<pre>\n<code>-XX:+PrintGCDetails\n</code></pre>\n\n<p><img alt=\"image-20200706205821919\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724554956.png\" /></p>\n\n<h3>OutOfMemory举例</h3>\n\n<p><img alt=\"image-20200706205947535\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724555016.png\" /></p>\n\n<p><img alt=\"image-20200706210000461\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724555079.png\" /></p>\n\n<p>我们简单的写一个OOM例子</p>\n\n<pre>\n<code class=\"language-java\">/**\n * OOM测试\n *\n * @author: 陌溪\n * @create: 2020-07-06-21:11\n */\npublic class OOMTest {\n    public static void main(String[] args) {\n        List&lt;Integer&gt; list = new ArrayList&lt;&gt;();\n        while(true) {\n            list.add(999999999);\n        }\n    }\n}\n\n</code></pre>\n\n<p>然后设置启动参数</p>\n\n<pre>\n<code>-Xms10m -Xmx:10m\n</code></pre>\n\n<p>运行后，就出现OOM了，那么我们可以通过 VisualVM这个工具查看具体是什么参数造成的OOM</p>\n\n<p><img alt=\"image-20200706211652779\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724555117.png\" /></p>\n\n<h2>年轻代与老年代</h2>\n\n<p>存储在JVM中的Java对象可以被划分为两类：</p>\n\n<ul>\n\t<li>一类是生命周期较短的瞬时对象，这类对象的创建和消亡都非常迅速\n\t<ul>\n\t\t<li>生命周期短的，及时回收即可</li>\n\t</ul>\n\t</li>\n\t<li>另外一类对象的生命周期却非常长，在某些极端的情况下还能够与JVM的生命周期保持一致</li>\n</ul>\n\n<p>Java堆区进一步细分的话，可以划分为年轻代（YoungGen）和老年代（oldGen）</p>\n\n<p>其中年轻代又可以划分为Eden空间、Survivor0空间和Survivor1空间（有时也叫做from区、to区）</p>\n\n<p><img alt=\"image-20200707075847954\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724555189.png\" /></p>\n\n<p>下面这参数开发中一般不会调：</p>\n\n<p><img alt=\"image-20200707080154039\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724555216.png\" /></p>\n\n<ul>\n\t<li>Eden：From：to -&gt; 8:1:1</li>\n\t<li>新生代：老年代 - &gt; 1 : 2</li>\n</ul>\n\n<p>配置新生代与老年代在堆结构的占比。</p>\n\n<ul>\n\t<li>\n\t<p>默认-XX:NewRatio=2，表示新生代占1，老年代占2，新生代占整个堆的1/3</p>\n\t</li>\n\t<li>\n\t<p>可以修改-XX:NewRatio=4，表示新生代占1，老年代占4，新生代占整个堆的1/5</p>\n\t</li>\n</ul>\n\n<blockquote>\n<p>当发现在整个项目中，生命周期长的对象偏多，那么就可以通过调整 老年代的大小，来进行调优</p>\n</blockquote>\n\n<p>在HotSpot中，Eden空间和另外两个survivor空间缺省所占的比例是8：1：1当然开发人员可以通过选项&ldquo;-xx:SurvivorRatio&rdquo;调整这个空间比例。比如-xx:SurvivorRatio=8</p>\n\n<p>几乎所有的Java对象都是在Eden区被new出来的。绝大部分的Java对象的销毁都在新生代进行了。（有些大的对象在Eden区无法存储时候，将直接进入老年代）</p>\n\n<blockquote>\n<p>IBM公司的专门研究表明，新生代中80%的对象都是&ldquo;朝生夕死&rdquo;的。</p>\n\n<p>可以使用选项&quot;-Xmn&quot;设置新生代最大内存大小</p>\n\n<p>这个参数一般使用默认值就可以了。</p>\n</blockquote>\n\n<p><img alt=\"image-20200707084208115\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724555289.png\" /></p>\n\n<h2>图解对象分配过程</h2>\n\n<h3>概念</h3>\n\n<p>为新对象分配内存是一件非常严谨和复杂的任务，JM的设计者们不仅需要考虑内存如何分配、在哪里分配等问题，并且由于内存分配算法与内存回收算法密切相关，所以还需要考虑GC执行完内存回收后是否会在内存空间中产生内存碎片。</p>\n\n<ul>\n\t<li>new的对象先放伊甸园区。此区有大小限制。</li>\n\t<li>当伊甸园的空间填满时，程序又需要创建对象，JVM的垃圾回收器将对伊甸园区进行垃圾回收（MinorGC），将伊甸园区中的不再被其他对象所引用的对象进行销毁。再加载新的对象放到伊甸园区</li>\n\t<li>然后将伊甸园中的剩余对象移动到幸存者0区。</li>\n\t<li>如果再次触发垃圾回收，此时上次幸存下来的放到幸存者0区的，如果没有回收，就会放到幸存者1区。</li>\n\t<li>如果再次经历垃圾回收，此时会重新放回幸存者0区，接着再去幸存者1区。</li>\n\t<li>啥时候能去养老区呢？可以设置次数。默认是15次。</li>\n\t<li>在养老区，相对悠闲。当养老区内存不足时，再次触发GC：Major GC，进行养老区的内存清理</li>\n\t<li>若养老区执行了Major GC之后，发现依然无法进行对象的保存，就会产生OOM异常。</li>\n</ul>\n\n<p>可以设置参数：-Xx:MaxTenuringThreshold= N进行设置</p>\n\n<h3>图解过程</h3>\n\n<p>我们创建的对象，一般都是存放在Eden区的，当我们Eden区满了后，就会触发GC操作，一般被称为 YGC / Minor GC操作</p>\n\n<p><img alt=\"image-20200707084714886\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724555316.png\" /></p>\n\n<p>当我们进行一次垃圾收集后，红色的将会被回收，而绿色的还会被占用着，存放在S0(Survivor From)区。同时我们给每个对象设置了一个年龄计数器，一次回收后就是1。</p>\n\n<p>同时Eden区继续存放对象，当Eden区再次存满的时候，又会触发一个MinorGC操作，此时GC将会把 Eden和Survivor From中的对象 进行一次收集，把存活的对象放到 Survivor To区，同时让年龄 + 1</p>\n\n<p><img alt=\"image-20200707085232646\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724555379.png\" /></p>\n\n<p>我们继续不断的进行对象生成 和 垃圾回收，当Survivor中的对象的年龄达到15的时候，将会触发一次 Promotion晋升的操作，也就是将年轻代中的对象 晋升到 老年代中</p>\n\n<p><img alt=\"image-20200707085737207\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724555416.png\" /></p>\n\n<h3>思考：幸存区区满了后？</h3>\n\n<p>特别注意，在Eden区满了的时候，才会触发MinorGC，而幸存者区满了后，不会触发MinorGC操作</p>\n\n<p>如果Survivor区满了后，将会触发一些特殊的规则，也就是可能直接晋升老年代</p>\n\n<blockquote>\n<p>举例：以当兵为例，正常人的晋升可能是 ： 新兵 -&gt; 班长 -&gt; 排长 -&gt; 连长</p>\n\n<p>但是也有可能有些人因为做了非常大的贡献，直接从 新兵 -&gt; 排长</p>\n</blockquote>\n\n<h3>对象分配的特殊情况</h3>\n\n<p><img alt=\"image-20200707091058346\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724555444.png\" /></p>\n\n<h3>代码演示对象分配过程</h3>\n\n<p>我们不断的创建大对象</p>\n\n<pre>\n<code class=\"language-java\">/**\n * 代码演示对象创建过程\n *\n * @author: 陌溪\n * @create: 2020-07-07-9:16\n */\npublic class HeapInstanceTest {\n    byte [] buffer = new byte[new Random().nextInt(1024 * 200)];\n    public static void main(String[] args) throws InterruptedException {\n        ArrayList&lt;HeapInstanceTest&gt; list = new ArrayList&lt;&gt;();\n        while (true) {\n            list.add(new HeapInstanceTest());\n            Thread.sleep(10);\n        }\n    }\n}\n</code></pre>\n\n<p>然后设置JVM参数</p>\n\n<pre>\n<code class=\"language-bash\">-Xms600m -Xmx600m\n</code></pre>\n\n<p>然后cmd输入下面命令，打开VisualVM图形化界面</p>\n\n<pre>\n<code>jvisualvm\n</code></pre>\n\n<p>然后通过执行上面代码，通过VisualGC进行动态化查看</p>\n\n<p><img alt=\"垃圾回收\" src=\"http://localhost:8600//blog/admin/gif/2020/10/15/1602724555783.gif\" /></p>\n\n<p>最终，在老年代和新生代都满了，就出现OOM</p>\n\n<pre>\n<code>Exception in thread \"main\" java.lang.OutOfMemoryError: Java heap space\n\tat com.atguigu.java.chapter08.HeapInstanceTest.&lt;init&gt;(HeapInstanceTest.java:13)\n\tat com.atguigu.java.chapter08.HeapInstanceTest.main(HeapInstanceTest.java:17)\n</code></pre>\n\n<h3>常用的调优工具</h3>\n\n<ul>\n\t<li>JDK命令行</li>\n\t<li>Eclipse：Memory Analyzer Tool</li>\n\t<li>Jconsole</li>\n\t<li>Visual VM（实时监控 推荐~）</li>\n\t<li>Jprofiler（推荐~）</li>\n\t<li>Java Flight Recorder（实时监控）</li>\n\t<li>GCViewer</li>\n\t<li>GCEasy</li>\n</ul>\n\n<h3>总结</h3>\n\n<ul>\n\t<li>针对幸存者s0，s1区的总结：复制之后有交换，谁空谁是to</li>\n\t<li>关于垃圾回收：频繁在新生区收集，很少在老年代收集，几乎不再永久代和元空间进行收集</li>\n\t<li>新生代采用复制算法的目的：是为了减少内碎片</li>\n</ul>\n\n<h2>Minor GC，MajorGC、Full GC</h2>\n\n<ul>\n\t<li>Minor GC：新生代的GC</li>\n\t<li>Major GC：老年代的GC</li>\n\t<li>Full GC：整堆收集，收集整个Java堆和方法区的垃圾收集</li>\n</ul>\n\n<blockquote>\n<p>我们都知道，JVM的调优的一个环节，也就是垃圾收集，我们需要尽量的避免垃圾回收，因为在垃圾回收的过程中，容易出现STW的问题</p>\n\n<p>而 Major GC 和 Full GC出现STW的时间，是Minor GC的10倍以上</p>\n</blockquote>\n\n<p>JVM在进行GC时，并非每次都对上面三个内存区域一起回收的，大部分时候回收的都是指新生代。针对Hotspot VM的实现，它里面的GC按照回收区域又分为两大种类型：一种是部分收集（Partial GC），一种是整堆收集（FullGC）</p>\n\n<p>部分收集：不是完整收集整个Java堆的垃圾收集。其中又分为：</p>\n\n<ul>\n\t<li>新生代收集（MinorGC/YoungGC）：只是新生代的垃圾收集</li>\n\t<li>老年代收集（MajorGC/o1dGC）：只是老年代的圾收集。\n\t<ul>\n\t\t<li>目前，只有CMSGC会有单独收集老年代的行为。</li>\n\t\t<li>注意，很多时候Major GC会和Fu11GC混淆使用，需要具体分辨是老年代回收还是整堆回收。</li>\n\t</ul>\n\t</li>\n\t<li>混合收集（MixedGC）：收集整个新生代以及部分老年代的垃圾收集。\n\t<ul>\n\t\t<li>目前，只有G1 GC会有这种行为</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>整堆收集（FullGC）：收集整个java堆和方法区的垃圾收集。</p>\n\n<h3>Minor GC</h3>\n\n<p>当年轻代空间不足时，就会触发MinorGC，这里的年轻代满指的是Eden代满，Survivor满不会引发GC。（每次Minor GC会清理年轻代的内存。）</p>\n\n<p>因为Java对象大多都具备 <strong>朝生夕灭</strong> 的特性，所以Minor GC非常频繁，一般回收速度也比较快。这一定义既清晰又易于理解。</p>\n\n<p>Minor GC会引发STW，暂停其它用户的线程，等垃圾回收结束，用户线程才恢复运行</p>\n\n<blockquote>\n<p>STW：stop the word</p>\n</blockquote>\n\n<p><img alt=\"image-20200707095606813\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724555516.png\" /></p>\n\n<h3>Major GC</h3>\n\n<p>指发生在老年代的GC，对象从老年代消失时，我们说 &ldquo;Major Gc&rdquo; 或 &ldquo;Full GC&rdquo; 发生了</p>\n\n<p>出现了MajorGc，经常会伴随至少一次的Minor GC（但非绝对的，在Paralle1 Scavenge收集器的收集策略里就有直接进行MajorGC的策略选择过程）</p>\n\n<ul>\n\t<li>也就是在老年代空间不足时，会先尝试触发MinorGc。如果之后空间还不足，则触发Major GC</li>\n</ul>\n\n<p>Major GC的速度一般会比MinorGc慢1e倍以上，STW的时间更长，如果Major GC后，内存还不足，就报OOM了</p>\n\n<h3>Full GC</h3>\n\n<p>触发Fu11GC执行的情况有如下五种：</p>\n\n<ul>\n\t<li>调用System.gc（）时，系统建议执行Fu11GC，但是不必然执行</li>\n\t<li>老年代空间不足</li>\n\t<li>方法区空间不足</li>\n\t<li>通过Minor GC后进入老年代的平均大小大于老年代的可用内存</li>\n\t<li>由Eden区、survivor spacee（From Space）区向survivor spacel（To Space）区复制时，对象大小大于To Space可用内存，则把该对象转存到老年代，且老年代的可用内存小于该对象大小</li>\n</ul>\n\n<p>说明：Full GC 是开发或调优中尽量要避免的。这样暂时时间会短一些</p>\n\n<h3>GC 举例</h3>\n\n<p>我们编写一个OOM的异常，因为我们在不断的创建字符串，是存放在元空间的</p>\n\n<pre>\n<code class=\"language-java\">/**\n * GC测试\n *\n * @author: 陌溪\n * @create: 2020-07-07-10:01\n */\npublic class GCTest {\n    public static void main(String[] args) {\n        int i = 0;\n        try {\n            List&lt;String&gt; list = new ArrayList&lt;&gt;();\n            String a = \"mogu blog\";\n            while(true) {\n                list.add(a);\n                a = a + a;\n                i++;\n            }\n        }catch (Exception e) {\n            e.getStackTrace();\n        }\n    }\n}\n</code></pre>\n\n<p>设置JVM启动参数</p>\n\n<pre>\n<code class=\"language-bash\">-Xms10m -Xmx10m -XX:+PrintGCDetails\n</code></pre>\n\n<p>打印出的日志</p>\n\n<pre>\n<code>[GC (Allocation Failure) [PSYoungGen: 2038K-&gt;500K(2560K)] 2038K-&gt;797K(9728K), 0.3532002 secs] [Times: user=0.01 sys=0.00, real=0.36 secs] \n[GC (Allocation Failure) [PSYoungGen: 2108K-&gt;480K(2560K)] 2405K-&gt;1565K(9728K), 0.0014069 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n[Full GC (Ergonomics) [PSYoungGen: 2288K-&gt;0K(2560K)] [ParOldGen: 6845K-&gt;5281K(7168K)] 9133K-&gt;5281K(9728K), [Metaspace: 3482K-&gt;3482K(1056768K)], 0.0058675 secs] [Times: user=0.00 sys=0.00, real=0.01 secs] \n[GC (Allocation Failure) [PSYoungGen: 0K-&gt;0K(2560K)] 5281K-&gt;5281K(9728K), 0.0002857 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n[Full GC (Allocation Failure) [PSYoungGen: 0K-&gt;0K(2560K)] [ParOldGen: 5281K-&gt;5263K(7168K)] 5281K-&gt;5263K(9728K), [Metaspace: 3482K-&gt;3482K(1056768K)], 0.0058564 secs] [Times: user=0.00 sys=0.00, real=0.01 secs] \nHeap\n PSYoungGen      total 2560K, used 60K [0x00000000ffd00000, 0x0000000100000000, 0x0000000100000000)\n  eden space 2048K, 2% used [0x00000000ffd00000,0x00000000ffd0f138,0x00000000fff00000)\n  from space 512K, 0% used [0x00000000fff00000,0x00000000fff00000,0x00000000fff80000)\n  to   space 512K, 0% used [0x00000000fff80000,0x00000000fff80000,0x0000000100000000)\n ParOldGen       total 7168K, used 5263K [0x00000000ff600000, 0x00000000ffd00000, 0x00000000ffd00000)\n  object space 7168K, 73% used [0x00000000ff600000,0x00000000ffb23cf0,0x00000000ffd00000)\n Metaspace       used 3514K, capacity 4498K, committed 4864K, reserved 1056768K\n  class space    used 388K, capacity 390K, committed 512K, reserved 1048576K\n  \n  Exception in thread \"main\" java.lang.OutOfMemoryError: Java heap space\n\tat java.util.Arrays.copyOfRange(Arrays.java:3664)\n\tat java.lang.String.&lt;init&gt;(String.java:207)\n\tat java.lang.StringBuilder.toString(StringBuilder.java:407)\n\tat com.atguigu.java.chapter08.GCTest.main(GCTest.java:20)\n</code></pre>\n\n<p>触发OOM的时候，一定是进行了一次Full GC，因为只有在老年代空间不足时候，才会爆出OOM异常</p>\n\n<h2>堆空间分代思想</h2>\n\n<p>为什么要把Java堆分代？不分代就不能正常工作了吗？经研究，不同对象的生命周期不同。70%-99%的对象是临时对象。</p>\n\n<blockquote>\n<p>新生代：有Eden、两块大小相同的survivor（又称为from/to，s0/s1）构成，to总为空。 老年代：存放新生代中经历多次GC仍然存活的对象。</p>\n</blockquote>\n\n<p><img alt=\"image-20200707101511025\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724555544.png\" /></p>\n\n<p>其实不分代完全可以，分代的唯一理由就是优化GC性能。如果没有分代，那所有的对象都在一块，就如同把一个学校的人都关在一个教室。GC的时候要找到哪些对象没用，这样就会对堆的所有区域进行扫描。而很多对象都是朝生夕死的，如果分代的话，把新创建的对象放到某一地方，当GC的时候先把这块存储&ldquo;朝生夕死&rdquo;对象的区域进行回收，这样就会腾出很大的空间出来。</p>\n\n<p><img alt=\"image-20200707101543871\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724555572.png\" /></p>\n\n<h2>内存分配策略</h2>\n\n<p>如果对象在Eden出生并经过第一次Minor GC后仍然存活，并且能被Survivor容纳的话，将被移动到survivor空间中，并将对象年龄设为1。对象在survivor区中每熬过一次MinorGC，年龄就增加1岁，当它的年龄增加到一定程度（默认为15岁，其实每个JVM、每个GC都有所不同）时，就会被晋升到老年代</p>\n\n<p>对象晋升老年代的年龄阀值，可以通过选项-xx:MaxTenuringThreshold来设置</p>\n\n<p>针对不同年龄段的对象分配原则如下所示：</p>\n\n<ul>\n\t<li>优先分配到Eden\n\t<ul>\n\t\t<li>开发中比较长的字符串或者数组，会直接存在老年代，但是因为新创建的对象 都是 朝生夕死的，所以这个大对象可能也很快被回收，但是因为老年代触发Major GC的次数比 Minor GC要更少，因此可能回收起来就会比较慢</li>\n\t</ul>\n\t</li>\n\t<li>大对象直接分配到老年代\n\t<ul>\n\t\t<li>尽量避免程序中出现过多的大对象</li>\n\t</ul>\n\t</li>\n\t<li>长期存活的对象分配到老年代</li>\n\t<li>动态对象年龄判断\n\t<ul>\n\t\t<li>如果survivor区中相同年龄的所有对象大小的总和大于Survivor空间的一半，年龄大于或等于该年龄的对象可以直接进入老年代，无须等到MaxTenuringThreshold 中要求的年龄。</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>空间分配担保： -Xx:HandlePromotionFailure</p>\n\n<ul>\n\t<li>也就是经过Minor GC后，所有的对象都存活，因为Survivor比较小，所以就需要将Survivor无法容纳的对象，存放到老年代中。</li>\n</ul>\n\n<h2>为对象分配内存：TLAB</h2>\n\n<h3>问题：堆空间都是共享的么？</h3>\n\n<p>不一定，因为还有TLAB这个概念，在堆中划分出一块区域，为每个线程所独占</p>\n\n<h3>为什么有TLAB？</h3>\n\n<p>TLAB：Thread Local Allocation Buffer，也就是为每个线程单独分配了一个缓冲区</p>\n\n<p>堆区是线程共享区域，任何线程都可以访问到堆区中的共享数据</p>\n\n<p>由于对象实例的创建在JVM中非常频繁，因此在并发环境下从堆区中划分内存空间是线程不安全的</p>\n\n<p>为避免多个线程操作同一地址，需要使用加锁等机制，进而影响分配速度。</p>\n\n<h3>什么是TLAB</h3>\n\n<p>从内存模型而不是垃圾收集的角度，对Eden区域继续进行划分，JVM为每个线程分配了一个私有缓存区域，它包含在Eden空间内。</p>\n\n<p>多线程同时分配内存时，使用TLAB可以避免一系列的非线程安全问题，同时还能够提升内存分配的吞吐量，因此我们可以将这种内存分配方式称之为快速分配策略。</p>\n\n<p>据我所知所有OpenJDK衍生出来的JVM都提供了TLAB的设计。</p>\n\n<p><img alt=\"image-20200707103547712\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724555600.png\" /></p>\n\n<p>尽管不是所有的对象实例都能够在TLAB中成功分配内存，但JVM确实是将TLAB作为内存分配的首选。</p>\n\n<p>在程序中，开发人员可以通过选项&ldquo;-Xx:UseTLAB&rdquo;设置是否开启TLAB空间。</p>\n\n<p>默认情况下，TLAB空间的内存非常小，仅占有整个Eden空间的1，当然我们可以通过选项&ldquo;-Xx:TLABWasteTargetPercent&rdquo;设置TLAB空间所占用Eden空间的百分比大小。</p>\n\n<p>一旦对象在TLAB空间分配内存失败时，JVM就会尝试着通过使用加锁机制确保数据操作的原子性，从而直接在Eden空间中分配内存。</p>\n\n<h3>TLAB分配过程</h3>\n\n<p>对象首先是通过TLAB开辟空间，如果不能放入，那么需要通过Eden来进行分配</p>\n\n<p><img alt=\"image-20200707104253530\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724555628.png\" /></p>\n\n<h2>小结：堆空间的参数设置</h2>\n\n<ul>\n\t<li>\n\t<p>-XX：+PrintFlagsInitial：查看所有的参数的默认初始值</p>\n\t</li>\n\t<li>\n\t<p>-XX：+PrintFlagsFinal：查看所有的参数的最终值（可能会存在修改，不再是初始值）</p>\n\t</li>\n\t<li>\n\t<p>-Xms：初始堆空间内存（默认为物理内存的1/64）</p>\n\t</li>\n\t<li>\n\t<p>-Xmx：最大堆空间内存（默认为物理内存的1/4）</p>\n\t</li>\n\t<li>\n\t<p>-Xmn：设置新生代的大小。（初始值及最大值）</p>\n\t</li>\n\t<li>\n\t<p>-XX:NewRatio：配置新生代与老年代在堆结构的占比</p>\n\t</li>\n\t<li>\n\t<p>-XX:SurvivorRatio：设置新生代中Eden和S0/S1空间的比例</p>\n\t</li>\n\t<li>\n\t<p>-XX:MaxTenuringThreshold：设置新生代垃圾的最大年龄</p>\n\t</li>\n\t<li>\n\t<p>-XX：+PrintGCDetails：输出详细的GC处理日志</p>\n\n\t<ul>\n\t\t<li>打印gc简要信息：①-Xx：+PrintGC ② - verbose:gc</li>\n\t</ul>\n\t</li>\n\t<li>\n\t<p>-XX:HandlePromotionFalilure：是否设置空间分配担保</p>\n\t</li>\n</ul>\n\n<p>在发生Minor GC之前，虚拟机会检查老年代最大可用的连续空间是否大于新生代所有对象的总空间。I</p>\n\n<ul>\n\t<li>如果大于，则此次Minor GC是安全的</li>\n\t<li>如果小于，则虚拟机会查看-xx:HandlePromotionFailure设置值是否允担保失败。\n\t<ul>\n\t\t<li>如果HandlePromotionFailure=true，那么会继续检查老年代最大可用连续空间是否大于历次晋升到老年代的对象的平均大小。</li>\n\t\t<li>如果大于，则尝试进行一次Minor GC，但这次Minor GC依然是有风险的；</li>\n\t\t<li>如果小于，则改为进行一次FullGC。</li>\n\t\t<li>如果HandlePromotionFailure=false，则改为进行一次Ful1 Gc。</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>在JDK6 Update24之后，HandlePromotionFailure参数不会再影响到虚拟机的空间分配担保策略，观察openJDK中的源码变化，虽然源码中还定义了HandlePromotionFailure参数，但是在代码中已经不会再使用它。JDK6 Update 24之后的规则变为只要老年代的连续空间大于新生代对象总大小或者历次晋升的平均大小就会进行Minor GC，否则将进行FullGC。</p>\n\n<h2>堆是分配对象的唯一选择么？</h2>\n\n<h3>逃逸分析</h3>\n\n<p>在《深入理解Java虚拟机》中关于Java堆内存有这样一段描述：</p>\n\n<p>随着JIT编译期的发展与逃逸分析技术逐渐成熟，栈上分配、标量替换优化技术将会导致一些微妙的变化，所有的对象都分配到堆上也渐渐变得不那么&ldquo;绝对&rdquo;了。</p>\n\n<p>在Java虚拟机中，对象是在Java堆中分配内存的，这是一个普遍的常识。但是，有一种特殊情况，那就是如果经过逃逸分析（Escape Analysis）后发现，一个对象并没有逃逸出方法的话，那么就可能被优化成栈上分配。这样就无需在堆上分配内存，也无须进行垃圾回收了。这也是最常见的堆外存储技术。</p>\n\n<p>此外，前面提到的基于openJDk深度定制的TaoBaovm，其中创新的GCIH（GC invisible heap）技术实现off-heap，将生命周期较长的Java对象从heap中移至heap外，并且GC不能管理GCIH内部的Java对象，以此达到降低GC的回收频率和提升GC的回收效率的目的。</p>\n\n<p>如何将堆上的对象分配到栈，需要使用逃逸分析手段。</p>\n\n<p>这是一种可以有效减少Java程序中同步负载和内存堆分配压力的跨函数全局数据流分析算法。通过逃逸分析，Java Hotspot编译器能够分析出一个新的对象的引用的使用范围从而决定是否要将这个对象分配到堆上。逃逸分析的基本行为就是分析对象动态作用域：</p>\n\n<ul>\n\t<li>当一个对象在方法中被定义后，对象只在方法内部使用，则认为没有发生逃逸。</li>\n\t<li>当一个对象在方法中被定义后，它被外部方法所引用，则认为发生逃逸。例如作为调用参数传递到其他地方中。</li>\n</ul>\n\n<h4>逃逸分析举例</h4>\n\n<p>没有发生逃逸的对象，则可以分配到栈上，随着方法执行的结束，栈空间就被移除，每个栈里面包含了很多栈帧，也就是发生逃逸分析</p>\n\n<pre>\n<code class=\"language-java\">public void my_method() {\n    V v = new V();\n    // use v\n    // ....\n    v = null;\n}\n</code></pre>\n\n<p>针对下面的代码</p>\n\n<pre>\n<code class=\"language-java\">public static StringBuffer createStringBuffer(String s1, String s2) {\n    StringBuffer sb = new StringBuffer();\n    sb.append(s1);\n    sb.append(s2);\n    return sb;\n}\n</code></pre>\n\n<p>如果想要StringBuffer sb不发生逃逸，可以这样写</p>\n\n<pre>\n<code class=\"language-java\">public static String createStringBuffer(String s1, String s2) {\n    StringBuffer sb = new StringBuffer();\n    sb.append(s1);\n    sb.append(s2);\n    return sb.toString();\n}\n</code></pre>\n\n<p>完整的逃逸分析代码举例</p>\n\n<pre>\n<code class=\"language-java\">/**\n * 逃逸分析\n * 如何快速的判断是否发生了逃逸分析，大家就看new的对象是否在方法外被调用。\n * @author: 陌溪\n * @create: 2020-07-07-20:05\n */\npublic class EscapeAnalysis {\n\n    public EscapeAnalysis obj;\n\n    /**\n     * 方法返回EscapeAnalysis对象，发生逃逸\n     * @return\n     */\n    public EscapeAnalysis getInstance() {\n        return obj == null ? new EscapeAnalysis():obj;\n    }\n\n    /**\n     * 为成员属性赋值，发生逃逸\n     */\n    public void setObj() {\n        this.obj = new EscapeAnalysis();\n    }\n\n    /**\n     * 对象的作用于仅在当前方法中有效，没有发生逃逸\n     */\n    public void useEscapeAnalysis() {\n        EscapeAnalysis e = new EscapeAnalysis();\n    }\n\n    /**\n     * 引用成员变量的值，发生逃逸\n     */\n    public void useEscapeAnalysis2() {\n        EscapeAnalysis e = getInstance();\n        // getInstance().XXX  发生逃逸\n    }\n}\n</code></pre>\n\n<h4>参数设置</h4>\n\n<p>在JDK 1.7 版本之后，HotSpot中默认就已经开启了逃逸分析</p>\n\n<p>如果使用的是较早的版本，开发人员则可以通过：</p>\n\n<ul>\n\t<li>选项&ldquo;-xx：+DoEscapeAnalysis&quot;显式开启逃逸分析</li>\n\t<li>通过选项&ldquo;-xx：+PrintEscapeAnalysis&quot;查看逃逸分析的筛选结果</li>\n</ul>\n\n<h4>结论</h4>\n\n<p>开发中能使用局部变量的，就不要使用在方法外定义。</p>\n\n<p>使用逃逸分析，编译器可以对代码做如下优化：</p>\n\n<ul>\n\t<li>栈上分配：将堆分配转化为栈分配。如果一个对象在子程序中被分配，要使指向该对象的指针永远不会发生逃逸，对象可能是栈上分配的候选，而不是堆上分配</li>\n\t<li>同步省略：如果一个对象被发现只有一个线程被访问到，那么对于这个对象的操作可以不考虑同步。</li>\n\t<li>分离对象或标量替换：有的对象可能不需要作为一个连续的内存结构存在也可以被访问到，那么对象的部分（或全部）可以不存储在内存，而是存储在CPU寄存器中。</li>\n</ul>\n\n<h3>栈上分配</h3>\n\n<p>JIT编译器在编译期间根据逃逸分析的结果，发现如果一个对象并没有逃逸出方法的话，就可能被优化成栈上分配。分配完成后，继续在调用栈内执行，最后线程结束，栈空间被回收，局部变量对象也被回收。这样就无须进行垃圾回收了。</p>\n\n<p>常见的栈上分配的场景</p>\n\n<blockquote>\n<p>在逃逸分析中，已经说明了。分别是给成员变量赋值、方法返回值、实例引用传递。</p>\n</blockquote>\n\n<h4>举例</h4>\n\n<p>我们通过举例来说明 开启逃逸分析 和 未开启逃逸分析时候的情况</p>\n\n<pre>\n<code class=\"language-java\">/**\n * 栈上分配\n * -Xmx1G -Xms1G -XX:-DoEscapeAnalysis -XX:+PrintGCDetails\n * @author: 陌溪\n * @create: 2020-07-07-20:23\n */\nclass User {\n    private String name;\n    private String age;\n    private String gender;\n    private String phone;\n}\npublic class StackAllocation {\n    public static void main(String[] args) throws InterruptedException {\n        long start = System.currentTimeMillis();\n        for (int i = 0; i &lt; 100000000; i++) {\n            alloc();\n        }\n        long end = System.currentTimeMillis();\n        System.out.println(\"花费的时间为：\" + (end - start) + \" ms\");\n\n        // 为了方便查看堆内存中对象个数，线程sleep\n        Thread.sleep(10000000);\n    }\n\n    private static void alloc() {\n        User user = new User();\n    }\n}\n</code></pre>\n\n<p>设置JVM参数，表示未开启逃逸分析</p>\n\n<pre>\n<code>-Xmx1G -Xms1G -XX:-DoEscapeAnalysis -XX:+PrintGCDetails\n</code></pre>\n\n<p>运行结果，同时还触发了GC操作</p>\n\n<pre>\n<code>花费的时间为：664 ms\n</code></pre>\n\n<p>然后查看内存的情况，发现有大量的User存储在堆中</p>\n\n<p><img alt=\"image-20200707203038615\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724555657.png\" /></p>\n\n<p>我们在开启逃逸分析</p>\n\n<pre>\n<code>-Xmx1G -Xms1G -XX:+DoEscapeAnalysis -XX:+PrintGCDetails\n</code></pre>\n\n<p>然后查看运行时间，我们能够发现花费的时间快速减少，同时不会发生GC操作</p>\n\n<pre>\n<code>花费的时间为：5 ms\n</code></pre>\n\n<p>然后在看内存情况，我们发现只有很少的User对象，说明User发生了逃逸，因为他们存储在栈中，随着栈的销毁而消失</p>\n\n<p><img alt=\"image-20200707203441718\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724555684.png\" /></p>\n\n<h3>同步省略</h3>\n\n<p>线程同步的代价是相当高的，同步的后果是降低并发性和性能。</p>\n\n<p>在动态编译同步块的时候，JIT编译器可以借助逃逸分析来判断同步块所使用的锁对象是否只能够被一个线程访问而没有被发布到其他线程。如果没有，那么JIT编译器在编译这个同步块的时候就会取消对这部分代码的同步。这样就能大大提高并发性和性能。这个取消同步的过程就叫同步省略，也叫锁消除。</p>\n\n<p>例如下面的代码</p>\n\n<pre>\n<code class=\"language-java\">public void f() {\n    Object hellis = new Object();\n    synchronized(hellis) {\n        System.out.println(hellis);\n    }\n}\n</code></pre>\n\n<p>代码中对hellis这个对象加锁，但是hellis对象的生命周期只在f()方法中，并不会被其他线程所访问到，所以在JIT编译阶段就会被优化掉，优化成：</p>\n\n<pre>\n<code class=\"language-java\">public void f() {\n    Object hellis = new Object();\n\tSystem.out.println(hellis);\n}\n</code></pre>\n\n<p>我们将其转换成字节码</p>\n\n<p><img alt=\"image-20200707205634266\" src=\"http://localhost:8600//blog/admin/png/2020/10/15/1602724555745.png\" /></p>\n\n<h3>分离对象和标量替换</h3>\n\n<p>标量（scalar）是指一个无法再分解成更小的数据的数据。Java中的原始数据类型就是标量。</p>\n\n<p>相对的，那些还可以分解的数据叫做聚合量（Aggregate），Java中的对象就是聚合量，因为他可以分解成其他聚合量和标量。</p>\n\n<p>在JIT阶段，如果经过逃逸分析，发现一个对象不会被外界访问的话，那么经过J工T优化，就会把这个对象拆解成若干个其中包含的若干个成员变量来代替。这个过程就是标量替换。</p>\n\n<pre>\n<code class=\"language-java\">public static void main(String args[]) {\n    alloc();\n}\nclass Point {\n    private int x;\n    private int y;\n}\nprivate static void alloc() {\n    Point point = new Point(1,2);\n    System.out.println(\"point.x\" + point.x + \";point.y\" + point.y);\n}\n</code></pre>\n\n<p>以上代码，经过标量替换后，就会变成</p>\n\n<pre>\n<code class=\"language-java\">private static void alloc() {\n    int x = 1;\n    int y = 2;\n    System.out.println(\"point.x = \" + x + \"; point.y=\" + y);\n}\n</code></pre>\n\n<p>可以看到，Point这个聚合量经过逃逸分析后，发现他并没有逃逸，就被替换成两个聚合量了。那么标量替换有什么好处呢？就是可以大大减少堆内存的占用。因为一旦不需要创建对象了，那么就不再需要分配堆内存了。 标量替换为栈上分配提供了很好的基础。</p>\n\n<h3>代码优化之标量替换</h3>\n\n<p>上述代码在主函数中进行了1亿次alloc。调用进行对象创建，由于User对象实例需要占据约16字节的空间，因此累计分配空间达到将近1.5GB。如果堆空间小于这个值，就必然会发生GC。使用如下参数运行上述代码：</p>\n\n<pre>\n<code class=\"language-bash\">-server -Xmx100m -Xms100m -XX:+DoEscapeAnalysis -XX:+PrintGC -XX:+EliminateAllocations\n</code></pre>\n\n<p>这里设置参数如下：</p>\n\n<ul>\n\t<li>参数-server：启动Server模式，因为在server模式下，才可以启用逃逸分析。</li>\n\t<li>参数-XX:+DoEscapeAnalysis：启用逃逸分析</li>\n\t<li>参数-Xmx10m：指定了堆空间最大为10MB</li>\n\t<li>参数-XX:+PrintGC：将打印Gc日志。</li>\n\t<li>参数一xx：+EliminateAllocations：开启了标量替换（默认打开），允许将对象打散分配在栈上，比如对象拥有id和name两个字段，那么这两个字段将会被视为两个独立的局部变量进行分配</li>\n</ul>\n\n<h3>逃逸分析的不足</h3>\n\n<p>关于逃逸分析的论文在1999年就已经发表了，但直到JDK1.6才有实现，而且这项技术到如今也并不是十分成熟的。</p>\n\n<p>其根本原因就是无法保证逃逸分析的性能消耗一定能高于他的消耗。虽然经过逃逸分析可以做标量替换、栈上分配、和锁消除。但是逃逸分析自身也是需要进行一系列复杂的分析的，这其实也是一个相对耗时的过程。 一个极端的例子，就是经过逃逸分析之后，发现没有一个对象是不逃逸的。那这个逃逸分析的过程就白白浪费掉了。</p>\n\n<p>虽然这项技术并不十分成熟，但是它也是即时编译器优化技术中一个十分重要的手段。注意到有一些观点，认为通过逃逸分析，JVM会在栈上分配那些不会逃逸的对象，这在理论上是可行的，但是取决于JvM设计者的选择。据我所知，oracle Hotspot JVM中并未这么做，这一点在逃逸分析相关的文档里已经说明，所以可以明确所有的对象实例都是创建在堆上。</p>\n\n<p>目前很多书籍还是基于JDK7以前的版本，JDK已经发生了很大变化，intern字符串的缓存和静态变量曾经都被分配在永久代上，而永久代已经被元数据区取代。但是，intern字符串缓存和静态变量并不是被转移到元数据区，而是直接在堆上分配，所以这一点同样符合前面一点的结论：对象实例都是分配在堆上。</p>\n\n<h2>小结</h2>\n\n<p>年轻代是对象的诞生、成长、消亡的区域，一个对象在这里产生、应用，最后被垃圾回收器收集、结束生命。</p>\n\n<p>老年代放置长生命周期的对象，通常都是从survivor区域筛选拷贝过来的Java对象。当然，也有特殊情况，我们知道普通的对象会被分配在TLAB上；如果对象较大，JVM会试图直接分配在Eden其他位置上；如果对象太大，完全无法在新生代找到足够长的连续空闲空间，JVM就会直接分配到老年代。当GC只发生在年轻代中，回收年轻代对象的行为被称为MinorGc。</p>\n\n<p>当GC发生在老年代时则被称为MajorGc或者FullGC。一般的，MinorGc的发生频率要比MajorGC高很多，即老年代中垃圾回收发生的频率将大大低于年轻代。</p>\n",
      "tagUid": "5626932d452c2ad863d9b3cb0b69d22d",
      "clickCount": 87,
      "collectCount": 0,
      "fileUid": "http://azhe.oss-cn-beijing.aliyuncs.com/FerryMan/20210605174602150.png",
      "status": true,
      "createTime": "2020-10-15 17:16:54",
      "updateTime": "2021-06-06 01:46:07",
      "adminUid": "1f01cd1d2f474743b241d74008b12333",
      "isOriginal": "1",
      "author": "admin",
      "articlesPart": "博客",
      "typeId": "2",
      "typeName": "后端技术",
      "level": false,
      "isPublish": "1",
      "sort": 0,
      "openComment": true,
      "type": false,
      "outsideLink": null,
      "userUid": "1401086531753611264",
      "articleSource": false,
      "createBy": null,
      "lastUpdateBy": null
    },
    {
      "id": "11e0cace2148383e201439a682432d91",
      "oid": 3,
      "title": "【JVM】垃圾回收器",
      "summary": "【JVM】垃圾回收器",
      "content": "![src=http___www.windows7en.com_uploads_140829_2014032014095315.jpgrefer=http___www.windows7en.jpg](1)\n<h1 id=\"垃圾回收器\">垃圾回收器</h1>\n<h2 id=\"GC分类与性能指标\">GC分类与性能指标</h2>\n<p>垃圾收集器没有在规范中进行过多的规定，可以由不同的厂商、不同版本的JVM来实现。</p>\n<p>由于JDK的版本处于高速迭代过程中，因此Java发展至今已经衍生了众多的GC版本。</p>\n<p>从不同角度分析垃圾收集器，可以将GC分为不同的类型。</p>\n<blockquote>\n<p>Java不同版本新特性</p>\n<ul>\n<li>语法层面：Lambda表达式、switch、自动拆箱装箱、enum</li>\n<li>API层面：Stream API、新的日期时间、Optional、String、集合框架</li>\n<li>底层优化：JVM优化、GC的变化、元空间、静态域、字符串常量池位置变化</li>\n</ul>\n</blockquote>\n<h3 id=\"垃圾收集器分类\">垃圾收集器分类</h3>\n<h4 id=\"按线程数分\"><strong>按线程数分</strong></h4>\n<p><strong>按线程数分</strong>（垃圾回收线程数），可以分为串行垃圾回收器和并行垃圾回收器。</p>\n<p><img src=\"http://image.moguit.cn/e2af28473690473aa86e591a970251a2\" alt=\"image-20200713083030867\" /></p>\n<p>串行回收指的是在同一时间段内只允许有一个CPU用于执行垃圾回收操作，此时工作线程被暂停，直至垃圾收集工作结束。</p>\n<ul>\n<li>在诸如单CPU处理器或者较小的应用内存等硬件平台不是特别优越的场合，串行回收器的性能表现可以超过并行回收器和并发回收器。所以，串行回收默认被应用在客户端的Client模式下的JVM中</li>\n<li>在并发能力比较强的CPU上，并行回收器产生的停顿时间要短于串行回收器。</li>\n</ul>\n<p>和串行回收相反，并行收集可以运用多个CPU同时执行垃圾回收，因此提升了应用的吞吐量，不过并行回收仍然与串行回收一样，采用独占式，使用了“stop-the-world”机制。</p>\n<h4 id=\"按工作模式分\">按工作模式分</h4>\n<p>按照工作模式分，可以分为并发式垃圾回收器和独占式垃圾回收器。</p>\n<ul>\n<li>并发式垃圾回收器与应用程序线程交替工作，以尽可能减少应用程序的停顿时间。</li>\n<li>独占式垃圾回收器（Stop the world）一旦运行，就停止应用程序中的所有用户线程，直到垃圾回收过程完全结束。</li>\n</ul>\n<p><img src=\"http://image.moguit.cn/f5376dafb6574023b68f4e3d85690e35\" alt=\"image-20200713083443486\" /></p>\n<h4 id=\"按碎片处理方式分\">按碎片处理方式分</h4>\n<p>按碎片处理方式分，可分为压缩武垃圾回收器和非压缩式垃圾回收器。</p>\n<ul>\n<li>压缩式垃圾回收器会在回收完成后，对存活对象进行压缩整理，消除回收后的碎片。</li>\n<li>非压缩式的垃圾回收器不进行这步操作。</li>\n</ul>\n<p>按工作的内存区间分，又可分为年轻代垃圾回收器和老年代垃圾回收器。</p>\n<h3 id=\"评估GC的性能指标\">评估GC的性能指标</h3>\n<ul>\n<li><strong>吞吐量</strong>：运行用户代码的时间占总运行时间的比例（总运行时间 = 程序的运行时间 + 内存回收的时间）</li>\n<li><strong>垃圾收集开销</strong>：吞吐量的补数，垃圾收集所用时间与总运行时间的比例。</li>\n<li><strong>暂停时间</strong>：执行垃圾收集时，程序的工作线程被暂停的时间。</li>\n<li><strong>收集频率</strong>：相对于应用程序的执行，收集操作发生的频率。</li>\n<li><strong>内存占用</strong>：Java堆区所占的内存大小。</li>\n<li><strong>快速</strong>：一个对象从诞生到被回收所经历的时间。</li>\n</ul>\n<p>吞吐量、暂停时间、内存占用 这三者共同构成一个“不可能三角”。三者总体的表现会随着技术进步而越来越好。一款优秀的收集器通常最多同时满足其中的两项。 这三项里，暂停时间的重要性日益凸显。因为随着硬件发展，内存占用多些越来越能容忍，硬件性能的提升也有助于降低收集器运行时对应用程序的影响，即提高了吞吐量。而内存的扩大，对延迟反而带来负面效果。 简单来说，主要抓住两点：</p>\n<p>这三项里，暂停时间的重要性日益凸显。因为随着硬件发展，内存占用多些越来越能容忍，硬件性能的提升也有助于降低收集器运行时对应用程序的影响，即提高了吞吐量。而内存的扩大，对延迟反而带来负面效果。 简单来说，主要抓住两点：</p>\n<ul>\n<li>吞吐量</li>\n<li>暂停时间</li>\n</ul>\n<h3 id=\"性能指标-吞吐量\">性能指标：吞吐量</h3>\n<p>吞吐量就是CPU用于运行用户代码的时间与CPU总消耗时间的比值，即吞吐量=运行用户代码时间 /（运行用户代码时间+垃圾收集时间）</p>\n<blockquote>\n<p>比如：虚拟机总共运行了100分钟，其中垃圾收集花掉1分钟，那吞吐量就是99%。</p>\n</blockquote>\n<p>这种情况下，应用程序能容忍较高的暂停时间，因此，高吞吐量的应用程序有更长的时间基准，快速响应是不必考虑的</p>\n<p>吞吐量优先，意味着在单位时间内，STW的时间最短：0.2+0.2=e.4</p>\n<p><img src=\"http://image.moguit.cn/5c7132f313c9475aa7248135ba301003\" alt=\"image-20200713084726176\" /></p>\n<h3 id=\"性能指标-暂停时间\">性能指标：暂停时间</h3>\n<p>“暂停时间”是指一个时间段内应用程序线程暂停，让Gc线程执行的状态</p>\n<p>例如，GC期间1ee毫秒的暂停时间意味着在这1e0毫秒期间内没有应用程序线程是活动的。暂停时间优先，意味着尽可能让单次STW的时间最短：0.1+0.1 + 0.1+ 0.1+ 0.1=0.5</p>\n<p><img src=\"http://image.moguit.cn/b18aee33c11d4977a93a3dfe37ef6cf4\" alt=\"image-20200713085306400\" /></p>\n<h3 id=\"吞吐量vs暂停时间\">吞吐量vs暂停时间</h3>\n<p>高吞吐量较好因为这会让应用程序的最终用户感觉只有应用程序线程在做“生产性”工作。直觉上，吞吐量越高程序运行越快。</p>\n<p>低暂停时间（低延迟）较好因为从最终用户的角度来看不管是GC还是其他原因导致一个应用被挂起始终是不好的。这取决于应用程序的类型，有时候甚至短暂的200毫秒暂停都可能打断终端用户体验。因此，具有低的较大暂停时间是非常重要的，特别是对于一个交互式应用程序。</p>\n<p>不幸的是”高吞吐量”和”低暂停时间”是一对相互竞争的目标（矛盾）。</p>\n<p>因为如果选择以吞吐量优先，那么必然需要降低内存回收的执行频率，但是这样会导致GC需要更长的暂停时间来执行内存回收。</p>\n<p>相反的，如果选择以低延迟优先为原则，那么为了降低每次执行内存回收时的暂停时间，也只能频繁地执行内存回收，但这又引起了年轻代内存的缩减和导致程序吞吐量的下降。</p>\n<p>在设计（或使用）GC算法时，我们必须确定我们的目标：一个GC算法只可能针对两个目标之一（即只专注于较大吞吐量或最小暂停时间），或尝试找到一个二者的折衷。</p>\n<p>现在标准：<strong>在最大吞吐量优先的情况下，降低停顿时间</strong></p>\n<h2 id=\"不同的垃圾回收器概述\">不同的垃圾回收器概述</h2>\n<p>垃圾收集机制是Java的招牌能力，极大地提高了开发效率。这当然也是面试的热点。</p>\n<p>那么，Java常见的垃圾收集器有哪些？</p>\n<blockquote>\n<p>GC垃圾收集器是和JVM一脉相承的，它是和JVM进行搭配使用，在不同的使用场景对应的收集器也是有区别</p>\n</blockquote>\n<h3 id=\"垃圾回收器发展史\">垃圾回收器发展史</h3>\n<p>有了虚拟机，就一定需要收集垃圾的机制，这就是Garbage Collection，对应的产品我们称为Garbage Collector。</p>\n<ul>\n<li>1999年随JDK1.3.1一起来的是串行方式的serialGc，它是第一款GC。ParNew垃圾收集器是Serial收集器的多线程版本</li>\n<li>2002年2月26日，Parallel GC和Concurrent Mark Sweep GC跟随JDK1.4.2一起发布·</li>\n<li>Parallel GC在JDK6之后成为HotSpot默认GC。</li>\n<li>2012年，在JDK1.7u4版本中，G1可用。</li>\n<li>2017年，JDK9中G1变成默认的垃圾收集器，以替代CMS。</li>\n<li>2018年3月，JDK10中G1垃圾回收器的并行完整垃圾回收，实现并行性来改善最坏情况下的延迟。</li>\n<li>2018年9月，JDK11发布。引入Epsilon 垃圾回收器，又被称为 &quot;No-Op(无操作)“ 回收器。同时，引入ZGC：可伸缩的低延迟垃圾回收器（Experimental）</li>\n<li>2019年3月，JDK12发布。增强G1，自动返回未用堆内存给操作系统。同时，引入Shenandoah GC：低停顿时间的GC（Experimental）。·2019年9月，JDK13发布。增强zGC，自动返回未用堆内存给操作系统。</li>\n<li>2020年3月，JDK14发布。删除cMs垃圾回收器。扩展zGC在macos和Windows上的应用</li>\n</ul>\n<h3 id=\"7种经典的垃圾收集器\">7种经典的垃圾收集器</h3>\n<ul>\n<li>串行回收器：Serial、Serial old</li>\n<li>并行回收器：ParNew、Parallel Scavenge、Parallel old</li>\n<li>并发回收器：CMS、G11</li>\n</ul>\n<p><img src=\"http://image.moguit.cn/b20873e989cd4337913a0330d42969e9\" alt=\"image-20200713093551365\" /></p>\n<h3 id=\"7款经典收集器与垃圾分代之间的关系\">7款经典收集器与垃圾分代之间的关系</h3>\n<p><img src=\"http://image.moguit.cn/c81063d5dc684c4b9e06c7707c3e1200\" alt=\"image-20200713093757644\" /></p>\n<p>新生代收集器：Serial、ParNew、Paralle1 Scavenge；</p>\n<p>老年代收集器：Serial old、Parallel old、CMS；</p>\n<p>整堆收集器：G1；</p>\n<h3 id=\"垃圾收集器的组合关系\">垃圾收集器的组合关系</h3>\n<p><img src=\"http://image.moguit.cn/a0bc661006244119af70fab4ae876f71\" alt=\"image-20200713094745366\" /></p>\n<ul>\n<li>两个收集器间有连线，表明它们可以搭配使用：Serial/Serial old、Serial/CMS、ParNew/Serial old、ParNew/CMS、Parallel Scavenge/Serial 0ld、Parallel Scavenge/Parallel 01d、G1；</li>\n<li>其中Serial o1d作为CMs出现&quot;Concurrent Mode Failure&quot;失败的后备预案。</li>\n<li>（红色虚线）由于维护和兼容性测试的成本，在JDK 8时将Serial+CMS、ParNew+Serial old这两个组合声明为废弃（JEP173），并在JDK9中完全取消了这些组合的支持（JEP214），即：移除。</li>\n<li>（绿色虚线）JDK14中：弃用Paralle1 Scavenge和Serialold GC组合（JEP366）</li>\n<li>（青色虚线）JDK14中：删除CMs垃圾回收器（JEP363）</li>\n</ul>\n<p>为什么要有很多收集器，一个不够吗？因为Java的使用场景很多，移动端，服务器等。所以就需要针对不同的场景，提供不同的垃圾收集器，提高垃圾收集的性能。</p>\n<p>虽然我们会对各个收集器进行比较，但并非为了挑选一个最好的收集器出来。没有一种放之四海皆准、任何场景下都适用的完美收集器存在，更加没有万能的收集器。所以我们选择的只是对具体应用最合适的收集器。</p>\n<h3 id=\"如何查看默认垃圾收集器\">如何查看默认垃圾收集器</h3>\n<p>-XX:+PrintcommandLineFlags：查看命令行相关参数（包含使用的垃圾收集器）</p>\n<p>使用命令行指令：jinfo -flag 相关垃圾回收器参数 进程ID</p>\n<h2 id=\"Serial回收器-串行回收\">Serial回收器：串行回收</h2>\n<p>Serial收集器是最基本、历史最悠久的垃圾收集器了。JDK1.3之前回收新生代唯一的选择。</p>\n<p>Serial收集器作为HotSpot中client模式下的默认新生代垃圾收集器。</p>\n<p>Serial收集器采用复制算法、串行回收和&quot;stop-the-World&quot;机制的方式执行内存回收。</p>\n<p>除了年轻代之外，Serial收集器还提供用于执行老年代垃圾收集的Serial old收集器。Serial old收集器同样也采用了串行回收和&quot;stop the World&quot;机制，只不过内存回收算法使用的是标记-压缩算法。</p>\n<ul>\n<li>Serial old是运行在Client模式下默认的老年代的垃圾回收器</li>\n<li>Serial 0ld在Server模式下主要有两个用途：\n<ul>\n<li>与新生代的Parallel scavenge配合使用</li>\n<li>作为老年代CMS收集器的后备垃圾收集方案</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"http://image.moguit.cn/c9a3ac2f93ff431dae0a5396dec54667\" alt=\"image-20200713100703799\" /></p>\n<p>这个收集器是一个单线程的收集器，但它的“单线程”的意义并不仅仅说明它只会使用一个CPU或一条收集线程去完成垃圾收集工作，更重要的是在它进行垃圾收集时，必须暂停其他所有的工作线程，直到它收集结束（Stop The World）</p>\n<p>优势：简单而高效（与其他收集器的单线程比），对于限定单个cPU的环境来说，Serial收集器由于没有线程交互的开销，专心做垃圾收集自然可以获得最高的单线程收集效率。</p>\n<p>运行在client模式下的虚拟机是个不错的选择。</p>\n<p>在用户的桌面应用场景中，可用内存一般不大（几十MB至一两百MB），可以在较短时间内完成垃圾收集（几十ms至一百多ms），只要不频繁发生，使用串行回收器是可以接受的。</p>\n<p>在HotSpot虚拟机中，使用-XX：+UseSerialGC参数可以指定年轻代和老年代都使用串行收集器。</p>\n<p>等价于新生代用Serial GC，且老年代用Serial old GC</p>\n<h3 id=\"总结\">总结</h3>\n<p>这种垃圾收集器大家了解，现在已经不用串行的了。而且在限定单核cpu才可以用。现在都不是单核的了。</p>\n<p>对于交互较强的应用而言，这种垃圾收集器是不能接受的。一般在Java web应用程序中是不会采用串行垃圾收集器的。</p>\n<h2 id=\"ParNew回收器-并行回收\">ParNew回收器：并行回收</h2>\n<p>如果说serialGC是年轻代中的单线程垃圾收集器，那么ParNew收集器则是serial收集器的多线程版本。</p>\n<ul>\n<li>Par是Parallel的缩写，New：只能处理的是新生代</li>\n</ul>\n<p>ParNew 收集器除了采用并行回收的方式执行内存回收外，两款垃圾收集器之间几乎没有任何区别。ParNew收集器在年轻代中同样也是采用复制算法、&quot;stop-the-World&quot;机制。</p>\n<p>ParNew 是很多JVM运行在Server模式下新生代的默认垃圾收集器。</p>\n<p><img src=\"http://image.moguit.cn/7956256d195d42c882ea2efb9bd9078b\" alt=\"image-20200713102030127\" /></p>\n<ul>\n<li>对于新生代，回收次数频繁，使用并行方式高效。</li>\n<li>对于老年代，回收次数少，使用串行方式节省资源。（CPU并行需要切换线程，串行可以省去切换线程的资源）</li>\n</ul>\n<p>由于ParNew收集器是基于并行回收，那么是否可以断定ParNew收集器的回收效率在任何场景下都会比serial收集器更高效？</p>\n<p>因为除Serial外，目前只有ParNew GC能与CMS收集器配合工作</p>\n<p>在程序中，开发人员可以通过选项&quot;-XX：+UseParNewGC&quot;手动指定使用ParNew收集器执行内存回收任务。它表示年轻代使用并行收集器，不影响老年代。</p>\n<p>-XX:ParallelGCThreads限制线程数量，默认开启和CPU数据相同的线程数。</p>\n<h2 id=\"Parallel回收器-吞吐量优先\">Parallel回收器：吞吐量优先</h2>\n<p>HotSpot的年轻代中除了拥有ParNew收集器是基于并行回收的以外，Parallel Scavenge收集器同样也采用了复制算法、并行回收和&quot;Stop the World&quot;机制。</p>\n<p>那么Parallel 收集器的出现是否多此一举？</p>\n<ul>\n<li>和ParNew收集器不同，ParallelScavenge收集器的目标则是达到一个可控制的吞吐量（Throughput），它也被称为吞吐量优先的垃圾收集器。</li>\n<li>自适应调节策略也是Paralle1 Scavenge与ParNew一个重要区别。</li>\n</ul>\n<p>高吞吐量则可以高效率地利用CPU时间，尽快完成程序的运算任务，主要适合在后台运算而不需要太多交互的任务。因此，常见在服务器环境中使用。例如，那些执行批量处理、订单处理、工资支付、科学计算的应用程序。</p>\n<p>Paralle1收集器在JDK1.6时提供了用于执行老年代垃圾收集的Paralle1o1d收集器，用来代替老年代的serialold收集器。</p>\n<p>Parallel old收集器采用了标记-压缩算法，但同样也是基于并行回收和&quot;stop-the-World&quot;机制。</p>\n<p><img src=\"http://image.moguit.cn/df20d6f88ba744faa9f2eb12c5c4bb55\" alt=\"image-20200713110359441\" /></p>\n<p>在程序吞吐量优先的应用场景中，IParalle1收集器和Parallel old收集器的组合，在server模式下的内存回收性能很不错。在Java8中，默认是此垃圾收集器。</p>\n<h3 id=\"参数配置\">参数配置</h3>\n<p>-XX：+UseParallelGC 手动指定年轻代使用Paralle1并行收集器执行内存回收任务。</p>\n<p>-XX：+UseParalleloldcc 手动指定老年代都是使用并行回收收集器。</p>\n<ul>\n<li>分别适用于新生代和老年代。默认jdk8是开启的。</li>\n<li>上面两个参数，默认开启一个，另一个也会被开启。（互相激活）</li>\n</ul>\n<p>-XX:ParallelGcrhreads设置年轻代并行收集器的线程数。一般地，最好与CPU数量相等，以避免过多的线程数影响垃圾收集性能。</p>\n<p>在默认情况下，当CPU数量小于8个，ParallelGcThreads的值等于CPU数量。</p>\n<p>当CPU数量大于8个，ParallelGCThreads的值等于3+[5*CPU Count]/8]</p>\n<p>-XX:MaxGCPauseMillis 设置垃圾收集器最大停顿时间（即STw的时间）。单位是毫秒。</p>\n<p>为了尽可能地把停顿时间控制在MaxGCPauseMi11s以内，收集器在工作时会调整Java堆大小或者其他一些参数。 对于用户来讲，停顿时间越短体验越好。但是在服务器端，我们注重高并发，整体的吞吐量。所以服务器端适合Parallel，进行控制。该参数使用需谨慎。</p>\n<p>-XX:GCTimeRatio垃圾收集时间占总时间的比例（=1/（N+1））。用于衡量吞吐量的大小。</p>\n<p>取值范围（0，100）。默认值99，也就是垃圾回收时间不超过1。</p>\n<p>与前一个-xx:MaxGCPauseMillis参数有一定矛盾性。暂停时间越长，Radio参数就容易超过设定的比例。</p>\n<p>-XX:+UseAdaptivesizepplicy 设置Parallel scavenge收集器具有自适应调节策略</p>\n<p>在这种模式下，年轻代的大小、Eden和Survivor的比例、晋升老年代的对象年龄等参数会被自动调整，已达到在堆大小、吞吐量和停顿时间之间的平衡点。</p>\n<p>在手动调优比较困难的场合，可以直接使用这种自适应的方式，仅指定虚拟机的最大堆、目标的吞吐量（GCTimeRatio）和停顿时间（MaxGCPauseMil1s），让虚拟机自己完成调优工作。</p>\n<h2 id=\"CMS回收器-低延迟\">CMS回收器：低延迟</h2>\n<p>在JDK1.5时期，Hotspot推出了一款在强交互应用中几乎可认为有划时代意义的垃圾收集器：cMS（Concurrent-Mark-Sweep）收集器，这款收集器是HotSpot虚拟机中第一款真正意义上的并发收集器，<strong>它第一次实现了让垃圾收集线程与用户线程同时工作</strong>。</p>\n<p>CMS收集器的关注点是尽可能缩短垃圾收集时用户线程的停顿时间。停顿时间越短（低延迟）就越适合与用户交互的程序，良好的响应速度能提升用户体验。</p>\n<p>目前很大一部分的Java应用集中在互联网站或者B/S系统的服务端上，这类应用尤其重视服务的响应速度，希望系统停顿时间最短，以给用户带来较好的体验。CMS收集器就非常符合这类应用的需求。</p>\n<p>CMS的垃圾收集算法采用标记-清除算法，并且也会&quot;stop-the-world&quot;</p>\n<p>不幸的是，CMS作为老年代的收集器，却无法与JDK1.4.0中已经存在的新生代收集器Parallel Scavenge配合工作，所以在JDK1.5中使用CMS来收集老年代的时候，新生代只能选择ParNew或者Serial收集器中的一个。</p>\n<p>在G1出现之前，CMS使用还是非常广泛的。一直到今天，仍然有很多系统使用CMS GC。</p>\n<p><img src=\"http://image.moguit.cn/68b528d2d17a4aaca3550358d35380e7\" alt=\"image-20200713205154007\" /></p>\n<p>CMS整个过程比之前的收集器要复杂，整个过程分为4个主要阶段，即初始标记阶段、并发标记阶段、重新标记阶段和并发清除阶段。(涉及STW的阶段主要是：初始标记 和 重新标记)</p>\n<ul>\n<li><strong>初始标记</strong>（Initial-Mark）阶段：在这个阶段中，程序中所有的工作线程都将会因为“stop-the-world”机制而出现短暂的暂停，这个阶段的主要任务仅仅只是<strong>标记出GCRoots能直接关联到的对象</strong>。一旦标记完成之后就会恢复之前被暂停的所有应用线程。由于直接关联对象比较小，所以这里的速度非常快。</li>\n<li><strong>并发标记</strong>（Concurrent-Mark）阶段：从Gc Roots的直接关联对象开始遍历整个对象图的过程，这个过程耗时较长但是不需要停顿用户线程，可以与垃圾收集线程一起并发运行。</li>\n<li><strong>重新标记</strong>（Remark）阶段：由于在并发标记阶段中，程序的工作线程会和垃圾收集线程同时运行或者交叉运行，因此为了修正并发标记期间，因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间通常会比初始标记阶段稍长一些，但也远比并发标记阶段的时间短。</li>\n<li><strong>并发清除</strong>（Concurrent-Sweep）阶段：此阶段清理删除掉标记阶段判断的已经死亡的对象，释放内存空间。由于不需要移动存活对象，所以这个阶段也是可以与用户线程同时并发的</li>\n</ul>\n<p>尽管CMS收集器采用的是并发回收（非独占式），但是在其初始化标记和再次标记这两个阶段中仍然需要执行“Stop-the-World”机制暂停程序中的工作线程，不过暂停时间并不会太长，因此可以说明目前所有的垃圾收集器都做不到完全不需要“stop-the-World”，只是尽可能地缩短暂停时间。</p>\n<p>由于最耗费时间的并发标记与并发清除阶段都不需要暂停工作，所以整体的回收是低停顿的。</p>\n<p>另外，由于在垃圾收集阶段用户线程没有中断，所以在CMS回收过程中，还应该确保应用程序用户线程有足够的内存可用。因此，CMS收集器不能像其他收集器那样等到老年代几乎完全被填满了再进行收集，而是当堆内存使用率达到某一阈值时，便开始进行回收，以确保应用程序在CMS工作过程中依然有足够的空间支持应用程序运行。要是CMS运行期间预留的内存无法满足程序需要，就会出现一次“Concurrent Mode Failure” 失败，这时虚拟机将启动后备预案：临时启用Serial old收集器来重新进行老年代的垃圾收集，这样停顿时间就很长了。</p>\n<p>CMS收集器的垃圾收集算法采用的是<strong>标记清除算法</strong>，这意味着每次执行完内存回收后，由于被执行内存回收的无用对象所占用的内存空间极有可能是不连续的一些内存块，不可避免地将会产生一些内存碎片。那么CMS在为新对象分配内存空间时，将无法使用指针碰撞（Bump the Pointer）技术，而只能够选择空闲列表（Free List）执行内存分配。</p>\n<p><img src=\"http://image.moguit.cn/e69c5c84ce8846ce8af5f0af10060c34\" alt=\"image-20200713212230352\" /></p>\n<h3 id=\"CMS为什么不使用标记整理算法-\">CMS为什么不使用标记整理算法？</h3>\n<p>答案其实很简答，因为当并发清除的时候，用Compact整理内存的话，原来的用户线程使用的内存还怎么用呢？要保证用户线程能继续执行，前提的它运行的资源不受影响嘛。Mark Compact更适合“stop the world” 这种场景下使用</p>\n<h3 id=\"优点\">优点</h3>\n<ul>\n<li>并发收集</li>\n<li>低延迟</li>\n</ul>\n<h3 id=\"缺点\">缺点</h3>\n<ul>\n<li>会产生内存碎片，导致并发清除后，用户线程可用的空间不足。在无法分配大对象的情况下，不得不提前触发FullGC。</li>\n<li>CMS收集器对CPU资源非常敏感。在并发阶段，它虽然不会导致用户停顿，但是会因为占用了一部分线程而导致应用程序变慢，总吞吐量会降低。</li>\n<li>CMS收集器无法处理浮动垃圾。可能出现“Concurrent Mode Failure&quot;失败而导致另一次Full GC的产生。在并发标记阶段由于程序的工作线程和垃圾收集线程是同时运行或者交叉运行的，那么在并发标记阶段如果产生新的垃圾对象，CMS将无法对这些垃圾对象进行标记，最终会导致这些新产生的垃圾对象没有被及时回收，从而只能在下一次执行GC时释放这些之前未被回收的内存空间。</li>\n</ul>\n<h3 id=\"设置的参数\">设置的参数</h3>\n<ul>\n<li>-XX：+UseConcMarkSweepGC手动指定使用CMS收集器执行内存回收任务。</li>\n</ul>\n<p>开启该参数后会自动将-xx：+UseParNewGC打开。即：ParNew（Young区用）+CMS（01d区用）+Serial old的组合。</p>\n<ul>\n<li>-XX:CMSInitiatingoccupanyFraction 设置堆内存使用率的阈值，一旦达到该阈值，便开始进行回收。</li>\n</ul>\n<p>JDK5及以前版本的默认值为68，即当老年代的空间使用率达到68%时，会执行一次cMs回收。JDK6及以上版本默认值为92%</p>\n<p>如果内存增长缓慢，则可以设置一个稍大的值，大的阀值可以有效降低CMS的触发频率，减少老年代回收的次数可以较为明显地改善应用程序性能。反之，如果应用程序内存使用率增长很快，则应该降低这个阈值，以避免频繁触发老年代串行收集器。因此通过该选项便可以有效降低Ful1Gc的执行次数。</p>\n<ul>\n<li>-XX：+UseCMSCompactAtFullCollection用于指定在执行完Ful1</li>\n</ul>\n<p>GC后对内存空间进行压缩整理，以此避免内存碎片的产生。不过由于内存压缩整理过程无法并发执行，所带来的问题就是停顿时间变得更长了。</p>\n<ul>\n<li>-XX:CMSFullGCsBeforecompaction 设置在执行多少次Ful1GC后对内存空间进行压缩整理。</li>\n<li>-XX:ParallelcMSThreads 设置cMs的线程数量。</li>\n</ul>\n<p>CMs默认启动的线程数是（Paralle1GCThreads+3）/4，ParallelGCThreads是年轻代并行收集器的线程数。当CPU资源比较紧张时，受到CMS收集器线程的影响，应用程序的性能在垃圾回收阶段可能会非常糟糕。</p>\n<h3 id=\"小结\">小结</h3>\n<p>HotSpot有这么多的垃圾回收器，那么如果有人问，Serial GC、Parallel GC、Concurrent Mark Sweep GC这三个Gc有什么不同呢？</p>\n<p>请记住以下口令：</p>\n<ul>\n<li>如果你想要最小化地使用内存和并行开销，请选Serial GC；</li>\n<li>如果你想要最大化应用程序的吞吐量，请选Parallel GC；</li>\n<li>如果你想要最小化GC的中断或停顿时间，请选CMs GC。</li>\n</ul>\n<h3 id=\"JDK后续版本中CMS的变化\">JDK后续版本中CMS的变化</h3>\n<p><strong>JDK9新特性</strong>：CMS被标记为eprecate了（JEP291）&gt;如果对JDK9及以上版本的HotSpot虚拟机使用参数-XX： +UseConcMarkSweepGC来开启CMS收集器的话，用户会收到一个警告信息，提示CMS未来将会被废弃。</p>\n<p>JDK14新特性：删除CMs垃圾回收器（JEP363）移除了CMS垃圾收集器，如果在JDK14中使用 XX：+UseConcMarkSweepGC的话，JVM不会报错，只是给出一个warning信息，但是不会exit。JVM会自动回退以默认GC方式启动JVM</p>\n<h2 id=\"G1回收器-区域化分代式\">G1回收器：区域化分代式</h2>\n<h3 id=\"既然我们已经有了前面几个强大的GC-为什么还要发布Garbage-First-G1--\">既然我们已经有了前面几个强大的GC，为什么还要发布Garbage First（G1）？</h3>\n<p>原因就在于应用程序所应对的业务越来越庞大、复杂，用户越来越多，没有GC就不能保证应用程序正常进行，而经常造成STW的GC又跟不上实际的需求，所以才会不断地尝试对GC进行优化。G1（Garbage-First）垃圾回收器是在Java7 update4之后引入的一个新的垃圾回收器，是当今收集器技术发展的最前沿成果之一。</p>\n<p>与此同时，为了适应现在不断扩大的内存和不断增加的处理器数量，进一步降低暂停时间（pause time），同时兼顾良好的吞吐量。</p>\n<p><strong>官方给G1设定的目标是在延迟可控的情况下获得尽可能高的吞吐量，所以才担当起“全功能收集器”的重任与期望</strong>。</p>\n<h3 id=\"为什么名字叫-Garbage-First-G1-呢-\">为什么名字叫 Garbage First(G1)呢？</h3>\n<p>因为G1是一个并行回收器，它把堆内存分割为很多不相关的区域（Region）（物理上不连续的）。使用不同的Region来表示Eden、幸存者0区，幸存者1区，老年代等。</p>\n<p>G1 GC有计划地避免在整个Java堆中进行全区域的垃圾收集。G1跟踪各个Region里面的垃圾堆积的价值大小（回收所获得的空间大小以及回收所需时间的经验值），在后台维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的Region。</p>\n<p>由于这种方式的侧重点在于回收垃圾最大量的区间（Region），所以我们给G1一个名字：垃圾优先（Garbage First）。</p>\n<p>G1（Garbage-First）是一款面向服务端应用的垃圾收集器，主要针对配备多核CPU及大容量内存的机器，以极高概率满足GC停顿时间的同时，还兼具高吞吐量的性能特征。</p>\n<p>在JDK1.7版本正式启用，移除了Experimenta1的标识，是JDK9以后的默认垃圾回收器，取代了CMS回收器以及Paralle1+Parallel old组合。被orac1e官方称为“全功能的垃圾收集器”。</p>\n<p>与此同时，CMS已经在JDK9中被标记为废弃（deprecated）。在jdk8中还不是默认的垃圾回收器，需要使用-xx：+UseG1GC来启用。</p>\n<h3 id=\"G1垃圾收集器的优点\">G1垃圾收集器的优点</h3>\n<p>与其他GC收集器相比，G1使用了全新的分区算法，其特点如下所示：</p>\n<p><strong>并行与并发</strong></p>\n<ul>\n<li>并行性：G1在回收期间，可以有多个GC线程同时工作，有效利用多核计算能力。此时用户线程STW</li>\n<li>并发性：G1拥有与应用程序交替执行的能力，部分工作可以和应用程序同时执行，因此，一般来说，不会在整个回收阶段发生完全阻塞应用程序的情况</li>\n</ul>\n<p><strong>分代收集</strong></p>\n<ul>\n<li>从分代上看，G1依然属于分代型垃圾回收器，它会区分年轻代和老年代，年轻代依然有Eden区和Survivor区。但从堆的结构上看，它不要求整个Eden区、年轻代或者老年代都是连续的，也不再坚持固定大小和固定数量。</li>\n<li>将堆空间分为若干个区域（Region），这些区域中包含了逻辑上的年轻代和老年代。</li>\n<li>和之前的各类回收器不同，它同时兼顾年轻代和老年代。对比其他回收器，或者工作在年轻代，或者工作在老年代；</li>\n</ul>\n<p>G1所谓的分代，已经不是下面这样的了</p>\n<p><img src=\"http://image.moguit.cn/e12a1513700d43ce9829d852ca322b28\" alt=\"image-20200713215105293\" /></p>\n<p>而是这样的一个区域</p>\n<p><img src=\"http://image.moguit.cn/5328b852ef4e4218b72bbd2604f0ebc5\" alt=\"image-20200713215133839\" /></p>\n<p><strong>空间整合</strong></p>\n<ul>\n<li>CMS：“标记-清除”算法、内存碎片、若干次Gc后进行一次碎片整理</li>\n<li>G1将内存划分为一个个的region。内存的回收是以region作为基本单位的。Region之间是复制算法，但整体上实际可看作是标记-压缩（Mark-Compact）算法，两种算法都可以避免内存碎片。这种特性有利于程序长时间运行，分配大对象时不会因为无法找到连续内存空间而提前触发下一次GC。尤其是当Java堆非常大的时候，G1的优势更加明显。</li>\n</ul>\n<p><strong>可预测的停顿时间模型（即：软实时soft real-time）</strong> 这是G1相对于CMS的另一大优势，G1除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为M毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒。</p>\n<ul>\n<li>由于分区的原因，G1可以只选取部分区域进行内存回收，这样缩小了回收的范围，因此对于全局停顿情况的发生也能得到较好的控制。</li>\n<li>G1跟踪各个Region里面的垃圾堆积的价值大小（回收所获得的空间大小以及回收所需时间的经验值），在后台维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的Region。保证了G1收集器在有限的时间内可以获取尽可能高的收集效率。</li>\n<li>相比于CMSGC，G1未必能做到CMS在最好情况下的延时停顿，但是最差情况要好很多。</li>\n</ul>\n<h3 id=\"G1垃圾收集器的缺点\">G1垃圾收集器的缺点</h3>\n<p>相较于CMS，G1还不具备全方位、压倒性优势。比如在用户程序运行过程中，G1无论是为了垃圾收集产生的内存占用（Footprint）还是程序运行时的额外执行负载（overload）都要比CMS要高。</p>\n<p>从经验上来说，在小内存应用上CMS的表现大概率会优于G1，而G1在大内存应用上则发挥其优势。平衡点在6-8GB之间。</p>\n<h3 id=\"G1参数设置\">G1参数设置</h3>\n<ul>\n<li>-XX:+UseG1GC：手动指定使用G1垃圾收集器执行内存回收任务</li>\n<li>-XX:G1HeapRegionSize设置每个Region的大小。值是2的幂，范围是1MB到32MB之间，目标是根据最小的Java堆大小划分出约2048个区域。默认是堆内存的1/2000。</li>\n<li>-XX:MaxGCPauseMillis 设置期望达到的最大Gc停顿时间指标（JVM会尽力实现，但不保证达到）。默认值是200ms</li>\n<li>-XX:+ParallelGcThread 设置STW工作线程数的值。最多设置为8</li>\n<li>-XX:ConcGCThreads 设置并发标记的线程数。将n设置为并行垃圾回收线程数（ParallelGcThreads）的1/4左右。</li>\n<li>-XX:InitiatingHeapoccupancyPercent 设置触发并发Gc周期的Java堆占用率阈值。超过此值，就触发GC。默认值是45。</li>\n</ul>\n<h3 id=\"G1收集器的常见操作步骤\">G1收集器的常见操作步骤</h3>\n<p>G1的设计原则就是简化JVM性能调优，开发人员只需要简单的三步即可完成调优：</p>\n<ul>\n<li>第一步：开启G1垃圾收集器</li>\n<li>第二步：设置堆的最大内存</li>\n<li>第三步：设置最大的停顿时间</li>\n</ul>\n<p>G1中提供了三种垃圾回收模式：YoungGC、Mixed GC和Fu11GC，在不同的条件下被触发。</p>\n<h3 id=\"G1收集器的适用场景\">G1收集器的适用场景</h3>\n<p>面向服务端应用，针对具有大内存、多处理器的机器。（在普通大小的堆里表现并不惊喜）</p>\n<p>最主要的应用是需要低GC延迟，并具有大堆的应用程序提供解决方案；</p>\n<p>如：在堆大小约6GB或更大时，可预测的暂停时间可以低于e.5秒；（G1通过每次只清理一部分而不是全部的Region的增量式清理来保证每次Gc停顿时间不会过长）。 用来替换掉JDK1.5中的CMS收集器；在下面的情况时，使用61可能比CMS好：</p>\n<ul>\n<li>超过5e%的Java堆被活动数据占用；</li>\n<li>对象分配频率或年代提升频率变化很大；</li>\n<li>GC停顿时间过长（长于e.5至1秒）</li>\n</ul>\n<p>HotSpot垃圾收集器里，除了61以外，其他的垃圾收集器使用内置的JVM线程执行Gc的多线程操作，而G1GC可以采用应用线程承担后台运行的GC工作，即当JVM的GC线程处理速度慢时，系统会调用应用程序线程帮助加速垃圾回收过程。</p>\n<h3 id=\"分区Region-化整为零\">分区Region：化整为零</h3>\n<p>使用G1收集器时，它将整个Java堆划分成约2048个大小相同的独立Region块，每个Region块大小根据堆空间的实际大小而定，整体被控制在1MB到32MB之间，且为2的N次幂，即1MB，2MB，4MB，8MB，16MB，32MB。可以通过</p>\n<p>XX:G1HeapRegionsize设定。所有的Region大小相同，且在JVM生命周期内不会被改变。</p>\n<p>虽然还保留有新生代和老年代的概念，但新生代和老年代不再是物理隔离的了，它们都是一部分Region（不需要连续）的集合。通过Region的动态分配方式实现逻辑上的连续。</p>\n<p><img src=\"http://image.moguit.cn/0f3195e8412a4c04ae9f5ad301dc588a\" alt=\"image-20200713223244886\" /></p>\n<p>一个region有可能属于Eden，Survivor或者old/Tenured内存区域。但是一个region只可能属于一个角色。图中的E表示该region属于Eden内存区域，s表示属于survivor内存区域，o表示属于01d内存区域。图中空白的表示未使用的内存空间。</p>\n<p>G1垃圾收集器还增加了一种新的内存区域，叫做Humongous内存区域，如图中的H块。主要用于存储大对象，如果超过1.5个region，就放到H。</p>\n<p>**设置H的原因：**对于堆中的对象，默认直接会被分配到老年代，但是如果它是一个短期存在的大对象就会对垃圾收集器造成负面影响。为了解决这个问题，G1划分了一个Humongous区，它用来专门存放大对象。如果一个H区装不下一个大对象，那么G1会寻找连续的H区来存储。为了能找到连续的H区，有时候不得不启动Fu11Gc。G1的大多数行为都把H区作为老年代的一部分来看待。</p>\n<p>每个Region都是通过指针碰撞来分配空间</p>\n<p><img src=\"http://image.moguit.cn/c06aadcef53c4becb21da57be83d1ba0\" alt=\"image-20200713223509993\" /></p>\n<h3 id=\"G1垃圾回收器的回收过程\">G1垃圾回收器的回收过程</h3>\n<p>G1GC的垃圾回收过程主要包括如下三个环节：</p>\n<ul>\n<li>年轻代GC（Young GC）</li>\n<li>老年代并发标记过程（Concurrent Marking）</li>\n<li>混合回收（Mixed GC）</li>\n</ul>\n<p>（如果需要，单线程、独占式、高强度的Fu11GC还是继续存在的。它针对GC的评估失败提供了一种失败保护机制，即强力回收。）</p>\n<p><img src=\"http://image.moguit.cn/5c542594ac9444b48043f4b23c2ec44c\" alt=\"image-20200713224113996\" /></p>\n<p>顺时针，young gc-&gt;young gc+concurrent mark-&gt;Mixed GC顺序，进行垃圾回收。</p>\n<p>应用程序分配内存，当年轻代的Eden区用尽时开始年轻代回收过程；G1的年轻代收集阶段是一个并行的独占式收集器。在年轻代回收期，G1GC暂停所有应用程序线程，启动多线程执行年轻代回收。然后从年轻代区间移动存活对象到Survivor区间或者老年区间，也有可能是两个区间都会涉及。</p>\n<p>当堆内存使用达到一定值（默认45%）时，开始老年代并发标记过程。</p>\n<p>标记完成马上开始混合回收过程。对于一个混合回收期，G1GC从老年区间移动存活对象到空闲区间，这些空闲区间也就成为了老年代的一部分。和年轻代不同，老年代的G1回收器和其他GC不同，G1的老年代回收器不需要整个老年代被回收，一次只需要扫描/回收一小部分老年代的Region就可以了。同时，这个老年代Region是和年轻代一起被回收的。</p>\n<p>举个例子：一个Web服务器，Java进程最大堆内存为4G，每分钟响应1500个请求，每45秒钟会新分配大约2G的内存。G1会每45秒钟进行一次年轻代回收，每31个小时整个堆的使用率会达到45%，会开始老年代并发标记过程，标记完成后开始四到五次的混合回收。</p>\n<h3 id=\"Remembered-Set-记忆集-\">Remembered Set（记忆集）</h3>\n<p>一个对象被不同区域引用的问题</p>\n<p>一个Region不可能是孤立的，一个Region中的对象可能被其他任意Region中对象引用，判断对象存活时，是否需要扫描整个Java堆才能保证准确？</p>\n<p>在其他的分代收集器，也存在这样的问题（而G1更突出）回收新生代也不得不同时扫描老年代？这样的话会降低MinorGC的效率；</p>\n<p><strong>解决方法：</strong></p>\n<p>无论G1还是其他分代收集器，JVM都是使用Remembered Set来避免全局扫描：</p>\n<p>每个Region都有一个对应的Remembered Set；每次Reference类型数据写操作时，都会产生一个Write Barrier暂时中断操作；</p>\n<p>然后检查将要写入的引用指向的对象是否和该Reference类型数据在不同的Region（其他收集器：检查老年代对象是否引用了新生代对象）；如果不同，通过cardTable把相关引用信息记录到引用指向对象的所在Region对应的Remembered Set中；当进行垃圾收集时，在GC根节点的枚举范围加入Remembered Set；就可以保证不进行全局扫描，也不会有遗漏。</p>\n<p><img src=\"http://image.moguit.cn/42f3aad6f049435381badb4c052fe176\" alt=\"image-20200713224716715\" /></p>\n<h3 id=\"G1回收过程-年轻代GC\">G1回收过程-年轻代GC</h3>\n<p>JVM启动时，G1先准备好Eden区，程序在运行过程中不断创建对象到Eden区，当Eden空间耗尽时，G1会启动一次年轻代垃圾回收过程。</p>\n<p>YGC时，首先G1停止应用程序的执行（stop-The-Wor1d），G1创建回收集（Collection Set），回收集是指需要被回收的内存分段的集合，年轻代回收过程的回收集包含年轻代Eden区和Survivor区所有的内存分段。</p>\n<p><img src=\"http://image.moguit.cn/3713efc8ca9d49f288f57a13de3ba121\" alt=\"image-20200713225100632\" /></p>\n<p>然后开始如下回收过程：</p>\n<ul>\n<li>第一阶段，扫描根</li>\n</ul>\n<p>根是指static变量指向的对象，正在执行的方法调用链条上的局部变量等。根引用连同RSet记录的外部引用作为扫描存活对象的入口。</p>\n<ul>\n<li>第二阶段，更新RSet</li>\n</ul>\n<p>处理dirty card queue（见备注）中的card，更新RSet。此阶段完成后，RSet可以准确的反映老年代对所在的内存分段中对象的引用。</p>\n<ul>\n<li>第三阶段，处理RSet</li>\n</ul>\n<p>识别被老年代对象指向的Eden中的对象，这些被指向的Eden中的对象被认为是存活的对象。</p>\n<ul>\n<li>第四阶段，复制对象。</li>\n</ul>\n<p>此阶段，对象树被遍历，Eden区内存段中存活的对象会被复制到Survivor区中空的内存分段，Survivor区内存段中存活的对象如果年龄未达阈值，年龄会加1，达到阀值会被会被复制到o1d区中空的内存分段。如果Survivor空间不够，Eden空间的部分数据会直接晋升到老年代空间。</p>\n<ul>\n<li>第五阶段，处理引用</li>\n</ul>\n<p>处理Soft，Weak，Phantom，Final，JNI Weak 等引用。最终Eden空间的数据为空，GC停止工作，而目标内存中的对象都是连续存储的，没有碎片，所以复制过程可以达到内存整理的效果，减少碎片。</p>\n<h3 id=\"G1回收过程-并发标记过程\">G1回收过程-并发标记过程</h3>\n<ul>\n<li>初始标记阶段：标记从根节点直接可达的对象。这个阶段是sTw的，并且会触发一次年轻代GC。</li>\n<li>根区域扫描（Root Region Scanning）：G1 Gc扫描survivor区直接可达的老年代区域对象，并标记被引用的对象。这一过程必须在youngGC之前完成。</li>\n<li>并发标记（Concurrent Marking）：在整个堆中进行并发标记（和应用程序并发执行），此过程可能被youngGC中断。在并发标记阶段，若发现区域对象中的所有对象都是垃圾，那这个区域会被立即回收。同时，并发标记过程中，会计算每个区域的对象活性（区域中存活对象的比例）。</li>\n<li>再次标记（Remark）：由于应用程序持续进行，需要修正上一次的标记结果。是STW的。G1中采用了比CMS更快的初始快照算法：snapshot-at-the-beginning（SATB）。</li>\n<li>独占清理（cleanup，STW）：计算各个区域的存活对象和GC回收比例，并进行排序，识别可以混合回收的区域。为下阶段做铺垫。是sTw的。这个阶段并不会实际上去做垃圾的收集</li>\n<li>并发清理阶段：识别并清理完全空闲的区域。</li>\n</ul>\n<h3 id=\"G1回收过程---混合回收\">G1回收过程 - 混合回收</h3>\n<p>当越来越多的对象晋升到老年代o1d region时，为了避免堆内存被耗尽，虚拟机会触发一个混合的垃圾收集器，即Mixed GC，该算法并不是一个old GC，除了回收整个Young Region，还会回收一部分的old Region。这里需要注意：<strong>是一部分老年代，而不是全部老年代</strong>。可以选择哪些o1d Region进行收集，从而可以对垃圾回收的耗时时间进行控制。也要注意的是Mixed GC并不是Full GC。</p>\n<p><img src=\"http://image.moguit.cn/127776c15dce4bc185787acf451c9f59\" alt=\"image-20200713225810871\" /></p>\n<p>并发标记结束以后，老年代中百分百为垃圾的内存分段被回收了，部分为垃圾的内存分段被计算了出来。默认情况下，这些老年代的内存分段会分8次（可以通过-XX:G1MixedGCCountTarget设置）被回收</p>\n<p>混合回收的回收集（Collection Set）包括八分之一的老年代内存分段，Eden区内存分段，Survivor区内存分段。混合回收的算法和年轻代回收的算法完全一样，只是回收集多了老年代的内存分段。具体过程请参考上面的年轻代回收过程。</p>\n<p>由于老年代中的内存分段默认分8次回收，G1会优先回收垃圾多的内存分段。垃圾占内存分段比例越高的，越会被先回收。并且有一个阈值会决定内存分段是否被回收，</p>\n<p>XX:G1MixedGCLiveThresholdPercent，默认为65%，意思是垃圾占内存分段比例要达到65%才会被回收。如果垃圾占比太低，意味着存活的对象占比高，在复制的时候会花费更多的时间。</p>\n<p>混合回收并不一定要进行8次。有一个阈值-XX:G1HeapWastePercent，默认值为1e%，意思是允许整个堆内存中有10%的空间被浪费，意味着如果发现可以回收的垃圾占堆内存的比例低于1e%，则不再进行混合回收。因为GC会花费很多的时间但是回收到的内存却很少。</p>\n<h3 id=\"G1回收可选的过程4---Full-GC\">G1回收可选的过程4 - Full GC</h3>\n<p>G1的初衷就是要避免Fu11GC的出现。但是如果上述方式不能正常工作，G1会停止应用程序的执行（stop-The-world），使用单线程的内存回收算法进行垃圾回收，性能会非常差，应用程序停顿时间会很长。</p>\n<p>要避免Fu11GC的发生，一旦发生需要进行调整。什么时候会发生Ful1GC呢？比如堆内存太小，当G1在复制存活对象的时候没有空的内存分段可用，则会回退到ful1gc，这种情况可以通过增大内存解决。 导致61Fu11GC的原因可能有两个：</p>\n<ul>\n<li>EVacuation的时候没有足够的to-space来存放晋升的对象；</li>\n<li>并发处理过程完成之前空间耗尽。</li>\n</ul>\n<h3 id=\"G1回收的优化建议\">G1回收的优化建议</h3>\n<p>从oracle官方透露出来的信息可获知，回收阶段（Evacuation）其实本也有想过设计成与用户程序一起并发执行，但这件事情做起来比较复杂，考虑到G1只是回一部分Region，停顿时间是用户可控制的，所以并不迫切去实现，而选择把这个特性放到了G1之后出现的低延迟垃圾收集器（即ZGC）中。另外，还考虑到G1不是仅仅面向低延迟，停顿用户线程能够最大幅度提高垃圾收集效率，为了保证吞吐量所以才选择了完全暂停用户线程的实现方案。</p>\n<p>年轻代大小</p>\n<ul>\n<li>避免使用-Xmn或-XX:NewRatio等相关选项显式设置年轻代大小</li>\n<li>固定年轻代的大小会覆盖</li>\n</ul>\n<p>暂停时间目标暂停时间目标不要太过严苛</p>\n<ul>\n<li>G1 GC的吞吐量目标是90%的应用程序时间和10%的垃圾回收时间</li>\n<li>评估G1GC的吞吐量时，暂停时间目标不要太严苛。目标太过严苛表示你愿意承受更多的垃圾回收开销，而这些会直接影响到吞吐量。</li>\n</ul>\n<h2 id=\"垃圾回收器总结\">垃圾回收器总结</h2>\n<p>截止JDK1.8，一共有7款不同的垃圾收集器。每一款的垃圾收集器都有不同的特点，在具体使用的时候，需要根据具体的情况选用不同的垃圾收集器。</p>\n<p><img src=\"http://image.moguit.cn/7bbd145aeb3e47ffbf9ef6cd472a2cc7\" alt=\"image-20200714075738203\" /></p>\n<p>GC发展阶段：Seria l=&gt; Parallel（并行）=&gt; CMS（并发）=&gt; G1 =&gt; ZGC</p>\n<p>不同厂商、不同版本的虚拟机实现差距比较大。HotSpot虚拟机在JDK7/8后所有收集器及组合如下图</p>\n<p><img src=\"http://image.moguit.cn/827e304bf1194104a3e824a4ab9dc384\" alt=\"image-20200714080151020\" /></p>\n<h3 id=\"怎么选择垃圾回收器\">怎么选择垃圾回收器</h3>\n<p>Java垃圾收集器的配置对于JVM优化来说是一个很重要的选择，选择合适的垃圾收集器可以让JVM的性能有一个很大的提升。怎么选择垃圾收集器？</p>\n<ul>\n<li>优先调整堆的大小让JVM自适应完成。</li>\n<li>如果内存小于100M，使用串行收集器</li>\n<li>如果是单核、单机程序，并且没有停顿时间的要求，串行收集器</li>\n<li>如果是多CPU、需要高吞吐量、允许停顿时间超过1秒，选择并行或者JVM自己选择</li>\n<li>如果是多CPU、追求低停顿时间，需快速响应（比如延迟不能超过1秒，如互联网应用），使用并发收集器</li>\n<li>官方推荐G1，性能高。现在互联网的项目，基本都是使用G1。</li>\n</ul>\n<p>最后需要明确一个观点：</p>\n<ul>\n<li>没有最好的收集器，更没有万能的收集</li>\n<li>调优永远是针对特定场景、特定需求，不存在一劳永逸的收集器</li>\n</ul>\n<h3 id=\"面试\">面试</h3>\n<p>对于垃圾收集，面试官可以循序渐进从理论、实践各种角度深入，也未必是要求面试者什么都懂。但如果你懂得原理，一定会成为面试中的加分项。 这里较通用、基础性的部分如下：</p>\n<p>垃圾收集的算法有哪些？如何判断一个对象是否可以回收？</p>\n<p>垃圾收集器工作的基本流程。</p>\n<p>另外，大家需要多关注垃圾回收器这一章的各种常用的参数</p>\n<h2 id=\"GC日志分析\">GC日志分析</h2>\n<p>通过阅读Gc日志，我们可以了解Java虚拟机内存分配与回收策略。 内存分配与垃圾回收的参数列表</p>\n<ul>\n<li>-XX:+PrintGc输出GC日志。类似：-verbose:gc</li>\n<li>-XX:+PrintGcDetails输出Gc的详细日志</li>\n<li>-XX:+PrintGcTimestamps 输出Gc的时间戳（以基准时间的形式）</li>\n<li>-XX:+PrintGCDatestamps 输出Gc的时间戳（以日期的形式，如2013-05-04T21：53：59.234+0800）</li>\n<li>-XX:+PrintHeapAtGC在进行Gc的前后打印出堆的信息</li>\n<li>-Xloggc:../logs/gc.1og日志文件的输出路径</li>\n</ul>\n<h3 id=\"verbose-gc\">verbose:gc</h3>\n<p>打开GC日志</p>\n<pre><code class=\"language-bash\">-verbose:gc\n\n</code></pre>\n<p>这个只会显示总的GC堆的变化，如下：</p>\n<p><img src=\"http://image.moguit.cn/6554517157554a5f956c14ab5256a8d2\" alt=\"image-20200714081610474\" /></p>\n<p>参数解析</p>\n<p><img src=\"http://image.moguit.cn/49ed4aad0976462d95fe69a111554d57\" alt=\"image-20200714081622526\" /></p>\n<h3 id=\"PrintGCDetails\">PrintGCDetails</h3>\n<p>打开GC日志</p>\n<pre><code class=\"language-bash\">-verbose:gc -XX:+PrintGCDetails\n\n</code></pre>\n<p>输入信息如下</p>\n<p><img src=\"http://image.moguit.cn/e52e549d02b54a379a9e2b01860620b8\" alt=\"image-20200714081909309\" /></p>\n<p>参数解析</p>\n<p><img src=\"http://image.moguit.cn/564fb80c36a74ead8da0d084d78d60f3\" alt=\"image-20200714081925767\" /></p>\n<h3 id=\"补充\">补充</h3>\n<ul>\n<li>[GC&quot;和&quot;[Fu11GC&quot;说明了这次垃圾收集的停顿类型，如果有&quot;Fu11&quot;则说明GC发生了&quot;stop The World&quot;</li>\n<li>使用Seria1收集器在新生代的名字是Default New Generation，因此显示的是&quot;[DefNew&quot;</li>\n<li>使用ParNew收集器在新生代的名字会变成&quot;[ParNew&quot;，意思是&quot;Parallel New Generation&quot;</li>\n<li>使用Paralle1 scavenge收集器在新生代的名字是”[PSYoungGen&quot;</li>\n<li>老年代的收集和新生代道理一样，名字也是收集器决定的</li>\n<li>使用G1收集器的话，会显示为&quot;garbage-first heap&quot;</li>\n</ul>\n<p>Allocation Failure表明本次引起GC的原因是因为在年轻代中没有足够的空间能够存储新的数据了。</p>\n<p>[PSYoungGen：5986K-&gt;696K（8704K）]5986K-&gt;704K（9216K）中括号内：GC回收前年轻代大小，回收后大小，（年轻代总大小）括号外：GC回收前年轻代和老年代大小，回收后大小，（年轻代和老年代总大小）</p>\n<p>user代表用户态回收耗时，sys内核态回收耗时，rea实际耗时。由于多核的原因，时间总和可能会超过rea1时间</p>\n<h3 id=\"Young-GC图片\">Young GC图片</h3>\n<p><img src=\"http://image.moguit.cn/1d27507cd71e45aeb9a7bd66afe03115\" alt=\"image-20200714082555688\" /></p>\n<h3 id=\"FullGC图片-\">FullGC图片、</h3>\n<p><img src=\"http://image.moguit.cn/810ab4da1ff94137a22e288b83ec76a0\" alt=\"image-20200714082714690\" /></p>\n<h3 id=\"GC回收举例\">GC回收举例</h3>\n<p>我们编写一个程序，用来说明GC收集的过程</p>\n<pre><code class=\"language-java\">/**\n * GC垃圾收集过程\n * @author: 陌溪\n * @create: 2020-07-14-8:35\n */\npublic class GCUseTest {\n    static final Integer _1MB = 1024 * 1024;\n    public static void main(String[] args) {\n        byte [] allocation1, allocation2, allocation3, allocation4;\n        allocation1 = new byte[2 *_1MB];\n        allocation2 = new byte[2 *_1MB];\n        allocation3 = new byte[2 *_1MB];\n        allocation4 = new byte[4 *_1MB];\n    }\n}\n\n</code></pre>\n<p>我们设置JVM启动参数</p>\n<pre><code class=\"language-bash\">-Xms10m -Xmx10m -XX:+PrintGCDetails\n\n</code></pre>\n<p>首先我们会将3个2M的数组存放到Eden区，然后后面4M的数组来了后，将无法存储，因为Eden区只剩下2M的剩余空间了，那么将会进行一次Young GC操作，将原来Eden区的内容，存放到Survivor区，但是Survivor区也存放不下，那么就会直接晋级存入Old 区</p>\n<p><img src=\"http://image.moguit.cn/05329144e4a848539a196a911210cac2\" alt=\"image-20200714083332238\" /></p>\n<p>然后我们将4M对象存入到Eden区中</p>\n<p><img src=\"http://image.moguit.cn/bfe9a7aa4fe44611a4225ffa5907d175\" alt=\"image-20200714083526790\" /></p>\n<p>可以用一些工具去分析这些GC日志</p>\n<p>常用的日志分析工具有：GCViewer、GCEasy、GCHisto、GCLogViewer、Hpjmeter、garbagecat等</p>\n<p><strong>GCViewer</strong></p>\n<p><img src=\"http://image.moguit.cn/58a5e03f426e40378c368fcad3ad7fb0\" alt=\"image-20200714084921184\" /></p>\n<p><strong>GC easy</strong></p>\n<p><img src=\"http://image.moguit.cn/ba907d5d7e2a4cf2b359bc2ee8b8f58a\" alt=\"image-20200714084726824\" /></p>\n<h2 id=\"垃圾回收器的新发展\">垃圾回收器的新发展</h2>\n<p>GC仍然处于飞速发展之中，目前的默认选项G1GC在不断的进行改进，很多我们原来认为的缺点，例如串行的Fu11GC、Card Table扫描的低效等，都已经被大幅改进，例如，JDK10以后，Fu11GC已经是并行运行，在很多场景下，其表现还略优于ParallelGC的并行Ful1GC实现。</p>\n<p>即使是SerialGC，虽然比较古老，但是简单的设计和实现未必就是过时的，它本身的开销，不管是GC相关数据结构的开销，还是线程的开销，都是非常小的，所以随着云计算的兴起，在serverless等新的应用场景下，Serial Gc找到了新的舞台。</p>\n<p>比较不幸的是CMSGC，因为其算法的理论缺陷等原因，虽然现在还有非常大的用户群体，但在JDK9中已经被标记为废弃，并在JDK14版本中移除</p>\n<p>Epsilon:A No-Op GarbageCollector（Epsilon垃圾回收器，&quot;No-Op（无操作）&quot;回收器）<a href=\"http://openidk.iava.net/iep\">http://openidk.iava.net/iep</a> s/318</p>\n<p>ZGC:A Scalable Low-Latency Garbage Collector（Experimental）（ZGC：可伸缩的低延迟垃圾回收器，处于实验性阶段）</p>\n<p>现在G1回收器已成为默认回收器好几年了。我们还看到了引入了两个新的收集器：ZGC（JDK11出现）和Shenandoah（Open JDK12）</p>\n<blockquote>\n<p>主打特点：低停顿时间</p>\n</blockquote>\n<h3 id=\"Open-JDK12的Shenandoash-GC\">Open JDK12的Shenandoash GC</h3>\n<p>Open JDK12的shenandoash GC：低停顿时间的GC（实验性）</p>\n<p>Shenandoah，无疑是众多GC中最孤独的一个。是第一款不由oracle公司团队领导开发的Hotspot垃圾收集器。不可避免的受到官方的排挤。比如号称openJDK和OracleJDk没有区别的Oracle公司仍拒绝在oracleJDK12中支持Shenandoah。</p>\n<p>Shenandoah垃圾回收器最初由RedHat进行的一项垃圾收集器研究项目Pauseless GC的实现，旨在针对JVM上的内存回收实现低停顿的需求。在2014年贡献给OpenJDK。</p>\n<p>Red Hat研发Shenandoah团队对外宣称，Shenandoah垃圾回收器的暂停时间与堆大小无关，这意味着无论将堆设置为200MB还是200GB，99.9%的目标都可以把垃圾收集的停顿时间限制在十毫秒以内。不过实际使用性能将取决于实际工作堆的大小和工作负载。</p>\n<p><img src=\"http://image.moguit.cn/cfd6595a3f3249ec986ee9e45f1fed13\" alt=\"image-20200714090608807\" /></p>\n<p>这是RedHat在2016年发表的论文数据，测试内容是使用Es对200GB的维基百科数据进行索引。从结果看：</p>\n<blockquote>\n<p>停顿时间比其他几款收集器确实有了质的飞跃，但也未实现最大停顿时间控制在十毫秒以内的目标。 而吞吐量方面出现了明显的下降，总运行时间是所有测试收集器里最长的。</p>\n</blockquote>\n<p>总结</p>\n<ul>\n<li>shenandoah Gc的弱项：高运行负担下的吞吐量下降。</li>\n<li>shenandoah GC的强项：低延迟时间。</li>\n</ul>\n<h3 id=\"革命性的ZGC\">革命性的ZGC</h3>\n<p>zGC与shenandoah目标高度相似，在尽可能对吞吐量影响不大的前提下，实现在任意堆内存大小下都可以把垃圾收集的停颇时间限制在十毫秒以内的低延迟。</p>\n<p>《深入理解Java虚拟机》一书中这样定义zGC：2GC收集器是一款基于Region内存布局的，（暂时）不设分代的，使用了读屏障、染色指针和内存多重映射等技术来实现可并发的标记-压缩算法的，以低延迟为首要目标的一款垃圾收集器。</p>\n<p>ZGC的工作过程可以分为4个阶段：<strong>并发标记 - 并发预备重分配 - 并发重分配 - 并发重映射</strong> 等。</p>\n<p>ZGC几乎在所有地方并发执行的，除了初始标记的是STw的。所以停顿时间几乎就耗费在初始标记上，这部分的实际时间是非常少的。</p>\n<p><img src=\"http://image.moguit.cn/77e579af05784c5caa5bac520e0ccfa9\" alt=\"image-20200714091201073\" /></p>\n<p>停顿时间对比</p>\n<p><img src=\"http://image.moguit.cn/83965f8a8afc4b05a22cabde793e3526\" alt=\"image-20200714091401511\" /></p>\n<p>虽然ZGC还在试验状态，没有完成所有特性，但此时性能已经相当亮眼，用“令人震惊、革命性”来形容，不为过。 未来将在服务端、大内存、低延迟应用的首选垃圾收集器。</p>\n<p><img src=\"http://image.moguit.cn/f7d81d6e33424719af53019e80a519de\" alt=\"image-20200714093243028\" /></p>\n<p>JDK14之前，2GC仅Linux才支持。</p>\n<p>尽管许多使用zGc的用户都使用类Linux的环境，但在Windows和macos上，人们也需要zGC进行开发部署和测试。许多桌面应用也可以从ZGC中受益。因此，2GC特性被移植到了Windows和macos上。</p>\n<p>现在mac或Windows上也能使用zGC了，示例如下：</p>\n<pre><code class=\"language-bash\">-XX:+UnlockExperimentalVMOptions-XX：+UseZGC\n\n</code></pre>\n<h3 id=\"AliGC\">AliGC</h3>\n<p>AliGC是阿里巴巴JVM团队基于G1算法，面向大堆（LargeHeap）应用场景。指定场景下的对比：</p>\n<p><img src=\"http://image.moguit.cn/35fa2d414f1a4507aa434422f87737cc\" alt=\"image-20200714093604012\" /></p>\n<p>当然，其它厂商也提供了各种别具一格的GC实现，例如比较有名的低延迟GC Zing</p>\n",
      "tagUid": "7e0e93ea6cdb44ae92e58f48e6496ed7,15721a34adba068763b5a2fb1991fc57,5626932d452c2ad863d9b3cb0b69d22d",
      "clickCount": 43,
      "collectCount": 1,
      "fileUid": "http://azhe.oss-cn-beijing.aliyuncs.com/FerryMan/20210510020349457.jpg",
      "status": true,
      "createTime": "2020-08-18 08:57:36",
      "updateTime": "2021-05-10 10:04:08",
      "adminUid": "1f01cd1d2f474743b241d74008b12333",
      "isOriginal": "1",
      "author": "admin",
      "articlesPart": "博客",
      "typeId": "2",
      "typeName": "后端技术",
      "level": false,
      "isPublish": "1",
      "sort": 0,
      "openComment": true,
      "type": false,
      "outsideLink": null,
      "userUid": "1401086531753611264",
      "articleSource": false,
      "createBy": null,
      "lastUpdateBy": "admin"
    },
    {
      "id": "11e0cace2148383e201439a682432d59",
      "oid": 3,
      "title": "【JVM】垃圾回收器",
      "summary": "【JVM】垃圾回收器",
      "content": "\n![src=http___blog.onlycj.com_wpcontent_uploads_2016_11_1366.pngrefer=http___blog.onlycj.jpg](http://1.116.227.4/group1/M00/00/00/CgAMDGC7SE6AYsD1AAG4Rt_BlXU158.jpg)\n![37d12f2eb9389b503a80d4b38b35e5dde6116ed7.png](http://1.116.227.4/group1/M00/00/00/CgAMDGC7R_uAFFpsAAOIDjJIIAo775.png)\n\n<h1 id=\"垃圾回收器\">垃圾回收器</h1>\n<h2 id=\"GC分类与性能指标\">GC分类与性能指标</h2>\n<p>垃圾收集器没有在规范中进行过多的规定，可以由不同的厂商、不同版本的JVM来实现。</p>\n<p>由于JDK的版本处于高速迭代过程中，因此Java发展至今已经衍生了众多的GC版本。</p>\n<p>从不同角度分析垃圾收集器，可以将GC分为不同的类型。</p>\n<blockquote>\n<p>Java不同版本新特性</p>\n<ul>\n<li>语法层面：Lambda表达式、switch、自动拆箱装箱、enum</li>\n<li>API层面：Stream API、新的日期时间、Optional、String、集合框架</li>\n<li>底层优化：JVM优化、GC的变化、元空间、静态域、字符串常量池位置变化</li>\n</ul>\n</blockquote>\n<h3 id=\"垃圾收集器分类\">垃圾收集器分类</h3>\n<h4 id=\"按线程数分\"><strong>按线程数分</strong></h4>\n<p><strong>按线程数分</strong>（垃圾回收线程数），可以分为串行垃圾回收器和并行垃圾回收器。</p>\n<p><img src=\"http://image.moguit.cn/e2af28473690473aa86e591a970251a2\" alt=\"image-20200713083030867\" /></p>\n<p>串行回收指的是在同一时间段内只允许有一个CPU用于执行垃圾回收操作，此时工作线程被暂停，直至垃圾收集工作结束。</p>\n<ul>\n<li>在诸如单CPU处理器或者较小的应用内存等硬件平台不是特别优越的场合，串行回收器的性能表现可以超过并行回收器和并发回收器。所以，串行回收默认被应用在客户端的Client模式下的JVM中</li>\n<li>在并发能力比较强的CPU上，并行回收器产生的停顿时间要短于串行回收器。</li>\n</ul>\n<p>和串行回收相反，并行收集可以运用多个CPU同时执行垃圾回收，因此提升了应用的吞吐量，不过并行回收仍然与串行回收一样，采用独占式，使用了“stop-the-world”机制。</p>\n<h4 id=\"按工作模式分\">按工作模式分</h4>\n<p>按照工作模式分，可以分为并发式垃圾回收器和独占式垃圾回收器。</p>\n<ul>\n<li>并发式垃圾回收器与应用程序线程交替工作，以尽可能减少应用程序的停顿时间。</li>\n<li>独占式垃圾回收器（Stop the world）一旦运行，就停止应用程序中的所有用户线程，直到垃圾回收过程完全结束。</li>\n</ul>\n<p><img src=\"http://image.moguit.cn/f5376dafb6574023b68f4e3d85690e35\" alt=\"image-20200713083443486\" /></p>\n<h4 id=\"按碎片处理方式分\">按碎片处理方式分</h4>\n<p>按碎片处理方式分，可分为压缩武垃圾回收器和非压缩式垃圾回收器。</p>\n<ul>\n<li>压缩式垃圾回收器会在回收完成后，对存活对象进行压缩整理，消除回收后的碎片。</li>\n<li>非压缩式的垃圾回收器不进行这步操作。</li>\n</ul>\n<p>按工作的内存区间分，又可分为年轻代垃圾回收器和老年代垃圾回收器。</p>\n<h3 id=\"评估GC的性能指标\">评估GC的性能指标</h3>\n<ul>\n<li><strong>吞吐量</strong>：运行用户代码的时间占总运行时间的比例（总运行时间 = 程序的运行时间 + 内存回收的时间）</li>\n<li><strong>垃圾收集开销</strong>：吞吐量的补数，垃圾收集所用时间与总运行时间的比例。</li>\n<li><strong>暂停时间</strong>：执行垃圾收集时，程序的工作线程被暂停的时间。</li>\n<li><strong>收集频率</strong>：相对于应用程序的执行，收集操作发生的频率。</li>\n<li><strong>内存占用</strong>：Java堆区所占的内存大小。</li>\n<li><strong>快速</strong>：一个对象从诞生到被回收所经历的时间。</li>\n</ul>\n<p>吞吐量、暂停时间、内存占用 这三者共同构成一个“不可能三角”。三者总体的表现会随着技术进步而越来越好。一款优秀的收集器通常最多同时满足其中的两项。 这三项里，暂停时间的重要性日益凸显。因为随着硬件发展，内存占用多些越来越能容忍，硬件性能的提升也有助于降低收集器运行时对应用程序的影响，即提高了吞吐量。而内存的扩大，对延迟反而带来负面效果。 简单来说，主要抓住两点：</p>\n<p>这三项里，暂停时间的重要性日益凸显。因为随着硬件发展，内存占用多些越来越能容忍，硬件性能的提升也有助于降低收集器运行时对应用程序的影响，即提高了吞吐量。而内存的扩大，对延迟反而带来负面效果。 简单来说，主要抓住两点：</p>\n<ul>\n<li>吞吐量</li>\n<li>暂停时间</li>\n</ul>\n<h3 id=\"性能指标-吞吐量\">性能指标：吞吐量</h3>\n<p>吞吐量就是CPU用于运行用户代码的时间与CPU总消耗时间的比值，即吞吐量=运行用户代码时间 /（运行用户代码时间+垃圾收集时间）</p>\n<blockquote>\n<p>比如：虚拟机总共运行了100分钟，其中垃圾收集花掉1分钟，那吞吐量就是99%。</p>\n</blockquote>\n<p>这种情况下，应用程序能容忍较高的暂停时间，因此，高吞吐量的应用程序有更长的时间基准，快速响应是不必考虑的</p>\n<p>吞吐量优先，意味着在单位时间内，STW的时间最短：0.2+0.2=e.4</p>\n<p><img src=\"http://image.moguit.cn/5c7132f313c9475aa7248135ba301003\" alt=\"image-20200713084726176\" /></p>\n<h3 id=\"性能指标-暂停时间\">性能指标：暂停时间</h3>\n<p>“暂停时间”是指一个时间段内应用程序线程暂停，让Gc线程执行的状态</p>\n<p>例如，GC期间1ee毫秒的暂停时间意味着在这1e0毫秒期间内没有应用程序线程是活动的。暂停时间优先，意味着尽可能让单次STW的时间最短：0.1+0.1 + 0.1+ 0.1+ 0.1=0.5</p>\n<p><img src=\"http://image.moguit.cn/b18aee33c11d4977a93a3dfe37ef6cf4\" alt=\"image-20200713085306400\" /></p>\n<h3 id=\"吞吐量vs暂停时间\">吞吐量vs暂停时间</h3>\n<p>高吞吐量较好因为这会让应用程序的最终用户感觉只有应用程序线程在做“生产性”工作。直觉上，吞吐量越高程序运行越快。</p>\n<p>低暂停时间（低延迟）较好因为从最终用户的角度来看不管是GC还是其他原因导致一个应用被挂起始终是不好的。这取决于应用程序的类型，有时候甚至短暂的200毫秒暂停都可能打断终端用户体验。因此，具有低的较大暂停时间是非常重要的，特别是对于一个交互式应用程序。</p>\n<p>不幸的是”高吞吐量”和”低暂停时间”是一对相互竞争的目标（矛盾）。</p>\n<p>因为如果选择以吞吐量优先，那么必然需要降低内存回收的执行频率，但是这样会导致GC需要更长的暂停时间来执行内存回收。</p>\n<p>相反的，如果选择以低延迟优先为原则，那么为了降低每次执行内存回收时的暂停时间，也只能频繁地执行内存回收，但这又引起了年轻代内存的缩减和导致程序吞吐量的下降。</p>\n<p>在设计（或使用）GC算法时，我们必须确定我们的目标：一个GC算法只可能针对两个目标之一（即只专注于较大吞吐量或最小暂停时间），或尝试找到一个二者的折衷。</p>\n<p>现在标准：<strong>在最大吞吐量优先的情况下，降低停顿时间</strong></p>\n<h2 id=\"不同的垃圾回收器概述\">不同的垃圾回收器概述</h2>\n<p>垃圾收集机制是Java的招牌能力，极大地提高了开发效率。这当然也是面试的热点。</p>\n<p>那么，Java常见的垃圾收集器有哪些？</p>\n<blockquote>\n<p>GC垃圾收集器是和JVM一脉相承的，它是和JVM进行搭配使用，在不同的使用场景对应的收集器也是有区别</p>\n</blockquote>\n<h3 id=\"垃圾回收器发展史\">垃圾回收器发展史</h3>\n<p>有了虚拟机，就一定需要收集垃圾的机制，这就是Garbage Collection，对应的产品我们称为Garbage Collector。</p>\n<ul>\n<li>1999年随JDK1.3.1一起来的是串行方式的serialGc，它是第一款GC。ParNew垃圾收集器是Serial收集器的多线程版本</li>\n<li>2002年2月26日，Parallel GC和Concurrent Mark Sweep GC跟随JDK1.4.2一起发布·</li>\n<li>Parallel GC在JDK6之后成为HotSpot默认GC。</li>\n<li>2012年，在JDK1.7u4版本中，G1可用。</li>\n<li>2017年，JDK9中G1变成默认的垃圾收集器，以替代CMS。</li>\n<li>2018年3月，JDK10中G1垃圾回收器的并行完整垃圾回收，实现并行性来改善最坏情况下的延迟。</li>\n<li>2018年9月，JDK11发布。引入Epsilon 垃圾回收器，又被称为 &quot;No-Op(无操作)“ 回收器。同时，引入ZGC：可伸缩的低延迟垃圾回收器（Experimental）</li>\n<li>2019年3月，JDK12发布。增强G1，自动返回未用堆内存给操作系统。同时，引入Shenandoah GC：低停顿时间的GC（Experimental）。·2019年9月，JDK13发布。增强zGC，自动返回未用堆内存给操作系统。</li>\n<li>2020年3月，JDK14发布。删除cMs垃圾回收器。扩展zGC在macos和Windows上的应用</li>\n</ul>\n<h3 id=\"7种经典的垃圾收集器\">7种经典的垃圾收集器</h3>\n<ul>\n<li>串行回收器：Serial、Serial old</li>\n<li>并行回收器：ParNew、Parallel Scavenge、Parallel old</li>\n<li>并发回收器：CMS、G11</li>\n</ul>\n<p><img src=\"http://image.moguit.cn/b20873e989cd4337913a0330d42969e9\" alt=\"image-20200713093551365\" /></p>\n<h3 id=\"7款经典收集器与垃圾分代之间的关系\">7款经典收集器与垃圾分代之间的关系</h3>\n<p><img src=\"http://image.moguit.cn/c81063d5dc684c4b9e06c7707c3e1200\" alt=\"image-20200713093757644\" /></p>\n<p>新生代收集器：Serial、ParNew、Paralle1 Scavenge；</p>\n<p>老年代收集器：Serial old、Parallel old、CMS；</p>\n<p>整堆收集器：G1；</p>\n<h3 id=\"垃圾收集器的组合关系\">垃圾收集器的组合关系</h3>\n<p><img src=\"http://image.moguit.cn/a0bc661006244119af70fab4ae876f71\" alt=\"image-20200713094745366\" /></p>\n<ul>\n<li>两个收集器间有连线，表明它们可以搭配使用：Serial/Serial old、Serial/CMS、ParNew/Serial old、ParNew/CMS、Parallel Scavenge/Serial 0ld、Parallel Scavenge/Parallel 01d、G1；</li>\n<li>其中Serial o1d作为CMs出现&quot;Concurrent Mode Failure&quot;失败的后备预案。</li>\n<li>（红色虚线）由于维护和兼容性测试的成本，在JDK 8时将Serial+CMS、ParNew+Serial old这两个组合声明为废弃（JEP173），并在JDK9中完全取消了这些组合的支持（JEP214），即：移除。</li>\n<li>（绿色虚线）JDK14中：弃用Paralle1 Scavenge和Serialold GC组合（JEP366）</li>\n<li>（青色虚线）JDK14中：删除CMs垃圾回收器（JEP363）</li>\n</ul>\n<p>为什么要有很多收集器，一个不够吗？因为Java的使用场景很多，移动端，服务器等。所以就需要针对不同的场景，提供不同的垃圾收集器，提高垃圾收集的性能。</p>\n<p>虽然我们会对各个收集器进行比较，但并非为了挑选一个最好的收集器出来。没有一种放之四海皆准、任何场景下都适用的完美收集器存在，更加没有万能的收集器。所以我们选择的只是对具体应用最合适的收集器。</p>\n<h3 id=\"如何查看默认垃圾收集器\">如何查看默认垃圾收集器</h3>\n<p>-XX:+PrintcommandLineFlags：查看命令行相关参数（包含使用的垃圾收集器）</p>\n<p>使用命令行指令：jinfo -flag 相关垃圾回收器参数 进程ID</p>\n<h2 id=\"Serial回收器-串行回收\">Serial回收器：串行回收</h2>\n<p>Serial收集器是最基本、历史最悠久的垃圾收集器了。JDK1.3之前回收新生代唯一的选择。</p>\n<p>Serial收集器作为HotSpot中client模式下的默认新生代垃圾收集器。</p>\n<p>Serial收集器采用复制算法、串行回收和&quot;stop-the-World&quot;机制的方式执行内存回收。</p>\n<p>除了年轻代之外，Serial收集器还提供用于执行老年代垃圾收集的Serial old收集器。Serial old收集器同样也采用了串行回收和&quot;stop the World&quot;机制，只不过内存回收算法使用的是标记-压缩算法。</p>\n<ul>\n<li>Serial old是运行在Client模式下默认的老年代的垃圾回收器</li>\n<li>Serial 0ld在Server模式下主要有两个用途：\n<ul>\n<li>与新生代的Parallel scavenge配合使用</li>\n<li>作为老年代CMS收集器的后备垃圾收集方案</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"http://image.moguit.cn/c9a3ac2f93ff431dae0a5396dec54667\" alt=\"image-20200713100703799\" /></p>\n<p>这个收集器是一个单线程的收集器，但它的“单线程”的意义并不仅仅说明它只会使用一个CPU或一条收集线程去完成垃圾收集工作，更重要的是在它进行垃圾收集时，必须暂停其他所有的工作线程，直到它收集结束（Stop The World）</p>\n<p>优势：简单而高效（与其他收集器的单线程比），对于限定单个cPU的环境来说，Serial收集器由于没有线程交互的开销，专心做垃圾收集自然可以获得最高的单线程收集效率。</p>\n<p>运行在client模式下的虚拟机是个不错的选择。</p>\n<p>在用户的桌面应用场景中，可用内存一般不大（几十MB至一两百MB），可以在较短时间内完成垃圾收集（几十ms至一百多ms），只要不频繁发生，使用串行回收器是可以接受的。</p>\n<p>在HotSpot虚拟机中，使用-XX：+UseSerialGC参数可以指定年轻代和老年代都使用串行收集器。</p>\n<p>等价于新生代用Serial GC，且老年代用Serial old GC</p>\n<h3 id=\"总结\">总结</h3>\n<p>这种垃圾收集器大家了解，现在已经不用串行的了。而且在限定单核cpu才可以用。现在都不是单核的了。</p>\n<p>对于交互较强的应用而言，这种垃圾收集器是不能接受的。一般在Java web应用程序中是不会采用串行垃圾收集器的。</p>\n<h2 id=\"ParNew回收器-并行回收\">ParNew回收器：并行回收</h2>\n<p>如果说serialGC是年轻代中的单线程垃圾收集器，那么ParNew收集器则是serial收集器的多线程版本。</p>\n<ul>\n<li>Par是Parallel的缩写，New：只能处理的是新生代</li>\n</ul>\n<p>ParNew 收集器除了采用并行回收的方式执行内存回收外，两款垃圾收集器之间几乎没有任何区别。ParNew收集器在年轻代中同样也是采用复制算法、&quot;stop-the-World&quot;机制。</p>\n<p>ParNew 是很多JVM运行在Server模式下新生代的默认垃圾收集器。</p>\n<p><img src=\"http://image.moguit.cn/7956256d195d42c882ea2efb9bd9078b\" alt=\"image-20200713102030127\" /></p>\n<ul>\n<li>对于新生代，回收次数频繁，使用并行方式高效。</li>\n<li>对于老年代，回收次数少，使用串行方式节省资源。（CPU并行需要切换线程，串行可以省去切换线程的资源）</li>\n</ul>\n<p>由于ParNew收集器是基于并行回收，那么是否可以断定ParNew收集器的回收效率在任何场景下都会比serial收集器更高效？</p>\n<p>因为除Serial外，目前只有ParNew GC能与CMS收集器配合工作</p>\n<p>在程序中，开发人员可以通过选项&quot;-XX：+UseParNewGC&quot;手动指定使用ParNew收集器执行内存回收任务。它表示年轻代使用并行收集器，不影响老年代。</p>\n<p>-XX:ParallelGCThreads限制线程数量，默认开启和CPU数据相同的线程数。</p>\n<h2 id=\"Parallel回收器-吞吐量优先\">Parallel回收器：吞吐量优先</h2>\n<p>HotSpot的年轻代中除了拥有ParNew收集器是基于并行回收的以外，Parallel Scavenge收集器同样也采用了复制算法、并行回收和&quot;Stop the World&quot;机制。</p>\n<p>那么Parallel 收集器的出现是否多此一举？</p>\n<ul>\n<li>和ParNew收集器不同，ParallelScavenge收集器的目标则是达到一个可控制的吞吐量（Throughput），它也被称为吞吐量优先的垃圾收集器。</li>\n<li>自适应调节策略也是Paralle1 Scavenge与ParNew一个重要区别。</li>\n</ul>\n<p>高吞吐量则可以高效率地利用CPU时间，尽快完成程序的运算任务，主要适合在后台运算而不需要太多交互的任务。因此，常见在服务器环境中使用。例如，那些执行批量处理、订单处理、工资支付、科学计算的应用程序。</p>\n<p>Paralle1收集器在JDK1.6时提供了用于执行老年代垃圾收集的Paralle1o1d收集器，用来代替老年代的serialold收集器。</p>\n<p>Parallel old收集器采用了标记-压缩算法，但同样也是基于并行回收和&quot;stop-the-World&quot;机制。</p>\n<p><img src=\"http://image.moguit.cn/df20d6f88ba744faa9f2eb12c5c4bb55\" alt=\"image-20200713110359441\" /></p>\n<p>在程序吞吐量优先的应用场景中，IParalle1收集器和Parallel old收集器的组合，在server模式下的内存回收性能很不错。在Java8中，默认是此垃圾收集器。</p>\n<h3 id=\"参数配置\">参数配置</h3>\n<p>-XX：+UseParallelGC 手动指定年轻代使用Paralle1并行收集器执行内存回收任务。</p>\n<p>-XX：+UseParalleloldcc 手动指定老年代都是使用并行回收收集器。</p>\n<ul>\n<li>分别适用于新生代和老年代。默认jdk8是开启的。</li>\n<li>上面两个参数，默认开启一个，另一个也会被开启。（互相激活）</li>\n</ul>\n<p>-XX:ParallelGcrhreads设置年轻代并行收集器的线程数。一般地，最好与CPU数量相等，以避免过多的线程数影响垃圾收集性能。</p>\n<p>在默认情况下，当CPU数量小于8个，ParallelGcThreads的值等于CPU数量。</p>\n<p>当CPU数量大于8个，ParallelGCThreads的值等于3+[5*CPU Count]/8]</p>\n<p>-XX:MaxGCPauseMillis 设置垃圾收集器最大停顿时间（即STw的时间）。单位是毫秒。</p>\n<p>为了尽可能地把停顿时间控制在MaxGCPauseMi11s以内，收集器在工作时会调整Java堆大小或者其他一些参数。 对于用户来讲，停顿时间越短体验越好。但是在服务器端，我们注重高并发，整体的吞吐量。所以服务器端适合Parallel，进行控制。该参数使用需谨慎。</p>\n<p>-XX:GCTimeRatio垃圾收集时间占总时间的比例（=1/（N+1））。用于衡量吞吐量的大小。</p>\n<p>取值范围（0，100）。默认值99，也就是垃圾回收时间不超过1。</p>\n<p>与前一个-xx:MaxGCPauseMillis参数有一定矛盾性。暂停时间越长，Radio参数就容易超过设定的比例。</p>\n<p>-XX:+UseAdaptivesizepplicy 设置Parallel scavenge收集器具有自适应调节策略</p>\n<p>在这种模式下，年轻代的大小、Eden和Survivor的比例、晋升老年代的对象年龄等参数会被自动调整，已达到在堆大小、吞吐量和停顿时间之间的平衡点。</p>\n<p>在手动调优比较困难的场合，可以直接使用这种自适应的方式，仅指定虚拟机的最大堆、目标的吞吐量（GCTimeRatio）和停顿时间（MaxGCPauseMil1s），让虚拟机自己完成调优工作。</p>\n<h2 id=\"CMS回收器-低延迟\">CMS回收器：低延迟</h2>\n<p>在JDK1.5时期，Hotspot推出了一款在强交互应用中几乎可认为有划时代意义的垃圾收集器：cMS（Concurrent-Mark-Sweep）收集器，这款收集器是HotSpot虚拟机中第一款真正意义上的并发收集器，<strong>它第一次实现了让垃圾收集线程与用户线程同时工作</strong>。</p>\n<p>CMS收集器的关注点是尽可能缩短垃圾收集时用户线程的停顿时间。停顿时间越短（低延迟）就越适合与用户交互的程序，良好的响应速度能提升用户体验。</p>\n<p>目前很大一部分的Java应用集中在互联网站或者B/S系统的服务端上，这类应用尤其重视服务的响应速度，希望系统停顿时间最短，以给用户带来较好的体验。CMS收集器就非常符合这类应用的需求。</p>\n<p>CMS的垃圾收集算法采用标记-清除算法，并且也会&quot;stop-the-world&quot;</p>\n<p>不幸的是，CMS作为老年代的收集器，却无法与JDK1.4.0中已经存在的新生代收集器Parallel Scavenge配合工作，所以在JDK1.5中使用CMS来收集老年代的时候，新生代只能选择ParNew或者Serial收集器中的一个。</p>\n<p>在G1出现之前，CMS使用还是非常广泛的。一直到今天，仍然有很多系统使用CMS GC。</p>\n<p><img src=\"http://image.moguit.cn/68b528d2d17a4aaca3550358d35380e7\" alt=\"image-20200713205154007\" /></p>\n<p>CMS整个过程比之前的收集器要复杂，整个过程分为4个主要阶段，即初始标记阶段、并发标记阶段、重新标记阶段和并发清除阶段。(涉及STW的阶段主要是：初始标记 和 重新标记)</p>\n<ul>\n<li><strong>初始标记</strong>（Initial-Mark）阶段：在这个阶段中，程序中所有的工作线程都将会因为“stop-the-world”机制而出现短暂的暂停，这个阶段的主要任务仅仅只是<strong>标记出GCRoots能直接关联到的对象</strong>。一旦标记完成之后就会恢复之前被暂停的所有应用线程。由于直接关联对象比较小，所以这里的速度非常快。</li>\n<li><strong>并发标记</strong>（Concurrent-Mark）阶段：从Gc Roots的直接关联对象开始遍历整个对象图的过程，这个过程耗时较长但是不需要停顿用户线程，可以与垃圾收集线程一起并发运行。</li>\n<li><strong>重新标记</strong>（Remark）阶段：由于在并发标记阶段中，程序的工作线程会和垃圾收集线程同时运行或者交叉运行，因此为了修正并发标记期间，因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间通常会比初始标记阶段稍长一些，但也远比并发标记阶段的时间短。</li>\n<li><strong>并发清除</strong>（Concurrent-Sweep）阶段：此阶段清理删除掉标记阶段判断的已经死亡的对象，释放内存空间。由于不需要移动存活对象，所以这个阶段也是可以与用户线程同时并发的</li>\n</ul>\n<p>尽管CMS收集器采用的是并发回收（非独占式），但是在其初始化标记和再次标记这两个阶段中仍然需要执行“Stop-the-World”机制暂停程序中的工作线程，不过暂停时间并不会太长，因此可以说明目前所有的垃圾收集器都做不到完全不需要“stop-the-World”，只是尽可能地缩短暂停时间。</p>\n<p>由于最耗费时间的并发标记与并发清除阶段都不需要暂停工作，所以整体的回收是低停顿的。</p>\n<p>另外，由于在垃圾收集阶段用户线程没有中断，所以在CMS回收过程中，还应该确保应用程序用户线程有足够的内存可用。因此，CMS收集器不能像其他收集器那样等到老年代几乎完全被填满了再进行收集，而是当堆内存使用率达到某一阈值时，便开始进行回收，以确保应用程序在CMS工作过程中依然有足够的空间支持应用程序运行。要是CMS运行期间预留的内存无法满足程序需要，就会出现一次“Concurrent Mode Failure” 失败，这时虚拟机将启动后备预案：临时启用Serial old收集器来重新进行老年代的垃圾收集，这样停顿时间就很长了。</p>\n<p>CMS收集器的垃圾收集算法采用的是<strong>标记清除算法</strong>，这意味着每次执行完内存回收后，由于被执行内存回收的无用对象所占用的内存空间极有可能是不连续的一些内存块，不可避免地将会产生一些内存碎片。那么CMS在为新对象分配内存空间时，将无法使用指针碰撞（Bump the Pointer）技术，而只能够选择空闲列表（Free List）执行内存分配。</p>\n<p><img src=\"http://image.moguit.cn/e69c5c84ce8846ce8af5f0af10060c34\" alt=\"image-20200713212230352\" /></p>\n<h3 id=\"CMS为什么不使用标记整理算法-\">CMS为什么不使用标记整理算法？</h3>\n<p>答案其实很简答，因为当并发清除的时候，用Compact整理内存的话，原来的用户线程使用的内存还怎么用呢？要保证用户线程能继续执行，前提的它运行的资源不受影响嘛。Mark Compact更适合“stop the world” 这种场景下使用</p>\n<h3 id=\"优点\">优点</h3>\n<ul>\n<li>并发收集</li>\n<li>低延迟</li>\n</ul>\n<h3 id=\"缺点\">缺点</h3>\n<ul>\n<li>会产生内存碎片，导致并发清除后，用户线程可用的空间不足。在无法分配大对象的情况下，不得不提前触发FullGC。</li>\n<li>CMS收集器对CPU资源非常敏感。在并发阶段，它虽然不会导致用户停顿，但是会因为占用了一部分线程而导致应用程序变慢，总吞吐量会降低。</li>\n<li>CMS收集器无法处理浮动垃圾。可能出现“Concurrent Mode Failure&quot;失败而导致另一次Full GC的产生。在并发标记阶段由于程序的工作线程和垃圾收集线程是同时运行或者交叉运行的，那么在并发标记阶段如果产生新的垃圾对象，CMS将无法对这些垃圾对象进行标记，最终会导致这些新产生的垃圾对象没有被及时回收，从而只能在下一次执行GC时释放这些之前未被回收的内存空间。</li>\n</ul>\n<h3 id=\"设置的参数\">设置的参数</h3>\n<ul>\n<li>-XX：+UseConcMarkSweepGC手动指定使用CMS收集器执行内存回收任务。</li>\n</ul>\n<p>开启该参数后会自动将-xx：+UseParNewGC打开。即：ParNew（Young区用）+CMS（01d区用）+Serial old的组合。</p>\n<ul>\n<li>-XX:CMSInitiatingoccupanyFraction 设置堆内存使用率的阈值，一旦达到该阈值，便开始进行回收。</li>\n</ul>\n<p>JDK5及以前版本的默认值为68，即当老年代的空间使用率达到68%时，会执行一次cMs回收。JDK6及以上版本默认值为92%</p>\n<p>如果内存增长缓慢，则可以设置一个稍大的值，大的阀值可以有效降低CMS的触发频率，减少老年代回收的次数可以较为明显地改善应用程序性能。反之，如果应用程序内存使用率增长很快，则应该降低这个阈值，以避免频繁触发老年代串行收集器。因此通过该选项便可以有效降低Ful1Gc的执行次数。</p>\n<ul>\n<li>-XX：+UseCMSCompactAtFullCollection用于指定在执行完Ful1</li>\n</ul>\n<p>GC后对内存空间进行压缩整理，以此避免内存碎片的产生。不过由于内存压缩整理过程无法并发执行，所带来的问题就是停顿时间变得更长了。</p>\n<ul>\n<li>-XX:CMSFullGCsBeforecompaction 设置在执行多少次Ful1GC后对内存空间进行压缩整理。</li>\n<li>-XX:ParallelcMSThreads 设置cMs的线程数量。</li>\n</ul>\n<p>CMs默认启动的线程数是（Paralle1GCThreads+3）/4，ParallelGCThreads是年轻代并行收集器的线程数。当CPU资源比较紧张时，受到CMS收集器线程的影响，应用程序的性能在垃圾回收阶段可能会非常糟糕。</p>\n<h3 id=\"小结\">小结</h3>\n<p>HotSpot有这么多的垃圾回收器，那么如果有人问，Serial GC、Parallel GC、Concurrent Mark Sweep GC这三个Gc有什么不同呢？</p>\n<p>请记住以下口令：</p>\n<ul>\n<li>如果你想要最小化地使用内存和并行开销，请选Serial GC；</li>\n<li>如果你想要最大化应用程序的吞吐量，请选Parallel GC；</li>\n<li>如果你想要最小化GC的中断或停顿时间，请选CMs GC。</li>\n</ul>\n<h3 id=\"JDK后续版本中CMS的变化\">JDK后续版本中CMS的变化</h3>\n<p><strong>JDK9新特性</strong>：CMS被标记为eprecate了（JEP291）&gt;如果对JDK9及以上版本的HotSpot虚拟机使用参数-XX： +UseConcMarkSweepGC来开启CMS收集器的话，用户会收到一个警告信息，提示CMS未来将会被废弃。</p>\n<p>JDK14新特性：删除CMs垃圾回收器（JEP363）移除了CMS垃圾收集器，如果在JDK14中使用 XX：+UseConcMarkSweepGC的话，JVM不会报错，只是给出一个warning信息，但是不会exit。JVM会自动回退以默认GC方式启动JVM</p>\n<h2 id=\"G1回收器-区域化分代式\">G1回收器：区域化分代式</h2>\n<h3 id=\"既然我们已经有了前面几个强大的GC-为什么还要发布Garbage-First-G1--\">既然我们已经有了前面几个强大的GC，为什么还要发布Garbage First（G1）？</h3>\n<p>原因就在于应用程序所应对的业务越来越庞大、复杂，用户越来越多，没有GC就不能保证应用程序正常进行，而经常造成STW的GC又跟不上实际的需求，所以才会不断地尝试对GC进行优化。G1（Garbage-First）垃圾回收器是在Java7 update4之后引入的一个新的垃圾回收器，是当今收集器技术发展的最前沿成果之一。</p>\n<p>与此同时，为了适应现在不断扩大的内存和不断增加的处理器数量，进一步降低暂停时间（pause time），同时兼顾良好的吞吐量。</p>\n<p><strong>官方给G1设定的目标是在延迟可控的情况下获得尽可能高的吞吐量，所以才担当起“全功能收集器”的重任与期望</strong>。</p>\n<h3 id=\"为什么名字叫-Garbage-First-G1-呢-\">为什么名字叫 Garbage First(G1)呢？</h3>\n<p>因为G1是一个并行回收器，它把堆内存分割为很多不相关的区域（Region）（物理上不连续的）。使用不同的Region来表示Eden、幸存者0区，幸存者1区，老年代等。</p>\n<p>G1 GC有计划地避免在整个Java堆中进行全区域的垃圾收集。G1跟踪各个Region里面的垃圾堆积的价值大小（回收所获得的空间大小以及回收所需时间的经验值），在后台维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的Region。</p>\n<p>由于这种方式的侧重点在于回收垃圾最大量的区间（Region），所以我们给G1一个名字：垃圾优先（Garbage First）。</p>\n<p>G1（Garbage-First）是一款面向服务端应用的垃圾收集器，主要针对配备多核CPU及大容量内存的机器，以极高概率满足GC停顿时间的同时，还兼具高吞吐量的性能特征。</p>\n<p>在JDK1.7版本正式启用，移除了Experimenta1的标识，是JDK9以后的默认垃圾回收器，取代了CMS回收器以及Paralle1+Parallel old组合。被orac1e官方称为“全功能的垃圾收集器”。</p>\n<p>与此同时，CMS已经在JDK9中被标记为废弃（deprecated）。在jdk8中还不是默认的垃圾回收器，需要使用-xx：+UseG1GC来启用。</p>\n<h3 id=\"G1垃圾收集器的优点\">G1垃圾收集器的优点</h3>\n<p>与其他GC收集器相比，G1使用了全新的分区算法，其特点如下所示：</p>\n<p><strong>并行与并发</strong></p>\n<ul>\n<li>并行性：G1在回收期间，可以有多个GC线程同时工作，有效利用多核计算能力。此时用户线程STW</li>\n<li>并发性：G1拥有与应用程序交替执行的能力，部分工作可以和应用程序同时执行，因此，一般来说，不会在整个回收阶段发生完全阻塞应用程序的情况</li>\n</ul>\n<p><strong>分代收集</strong></p>\n<ul>\n<li>从分代上看，G1依然属于分代型垃圾回收器，它会区分年轻代和老年代，年轻代依然有Eden区和Survivor区。但从堆的结构上看，它不要求整个Eden区、年轻代或者老年代都是连续的，也不再坚持固定大小和固定数量。</li>\n<li>将堆空间分为若干个区域（Region），这些区域中包含了逻辑上的年轻代和老年代。</li>\n<li>和之前的各类回收器不同，它同时兼顾年轻代和老年代。对比其他回收器，或者工作在年轻代，或者工作在老年代；</li>\n</ul>\n<p>G1所谓的分代，已经不是下面这样的了</p>\n<p><img src=\"http://image.moguit.cn/e12a1513700d43ce9829d852ca322b28\" alt=\"image-20200713215105293\" /></p>\n<p>而是这样的一个区域</p>\n<p><img src=\"http://image.moguit.cn/5328b852ef4e4218b72bbd2604f0ebc5\" alt=\"image-20200713215133839\" /></p>\n<p><strong>空间整合</strong></p>\n<ul>\n<li>CMS：“标记-清除”算法、内存碎片、若干次Gc后进行一次碎片整理</li>\n<li>G1将内存划分为一个个的region。内存的回收是以region作为基本单位的。Region之间是复制算法，但整体上实际可看作是标记-压缩（Mark-Compact）算法，两种算法都可以避免内存碎片。这种特性有利于程序长时间运行，分配大对象时不会因为无法找到连续内存空间而提前触发下一次GC。尤其是当Java堆非常大的时候，G1的优势更加明显。</li>\n</ul>\n<p><strong>可预测的停顿时间模型（即：软实时soft real-time）</strong> 这是G1相对于CMS的另一大优势，G1除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为M毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒。</p>\n<ul>\n<li>由于分区的原因，G1可以只选取部分区域进行内存回收，这样缩小了回收的范围，因此对于全局停顿情况的发生也能得到较好的控制。</li>\n<li>G1跟踪各个Region里面的垃圾堆积的价值大小（回收所获得的空间大小以及回收所需时间的经验值），在后台维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的Region。保证了G1收集器在有限的时间内可以获取尽可能高的收集效率。</li>\n<li>相比于CMSGC，G1未必能做到CMS在最好情况下的延时停顿，但是最差情况要好很多。</li>\n</ul>\n<h3 id=\"G1垃圾收集器的缺点\">G1垃圾收集器的缺点</h3>\n<p>相较于CMS，G1还不具备全方位、压倒性优势。比如在用户程序运行过程中，G1无论是为了垃圾收集产生的内存占用（Footprint）还是程序运行时的额外执行负载（overload）都要比CMS要高。</p>\n<p>从经验上来说，在小内存应用上CMS的表现大概率会优于G1，而G1在大内存应用上则发挥其优势。平衡点在6-8GB之间。</p>\n<h3 id=\"G1参数设置\">G1参数设置</h3>\n<ul>\n<li>-XX:+UseG1GC：手动指定使用G1垃圾收集器执行内存回收任务</li>\n<li>-XX:G1HeapRegionSize设置每个Region的大小。值是2的幂，范围是1MB到32MB之间，目标是根据最小的Java堆大小划分出约2048个区域。默认是堆内存的1/2000。</li>\n<li>-XX:MaxGCPauseMillis 设置期望达到的最大Gc停顿时间指标（JVM会尽力实现，但不保证达到）。默认值是200ms</li>\n<li>-XX:+ParallelGcThread 设置STW工作线程数的值。最多设置为8</li>\n<li>-XX:ConcGCThreads 设置并发标记的线程数。将n设置为并行垃圾回收线程数（ParallelGcThreads）的1/4左右。</li>\n<li>-XX:InitiatingHeapoccupancyPercent 设置触发并发Gc周期的Java堆占用率阈值。超过此值，就触发GC。默认值是45。</li>\n</ul>\n<h3 id=\"G1收集器的常见操作步骤\">G1收集器的常见操作步骤</h3>\n<p>G1的设计原则就是简化JVM性能调优，开发人员只需要简单的三步即可完成调优：</p>\n<ul>\n<li>第一步：开启G1垃圾收集器</li>\n<li>第二步：设置堆的最大内存</li>\n<li>第三步：设置最大的停顿时间</li>\n</ul>\n<p>G1中提供了三种垃圾回收模式：YoungGC、Mixed GC和Fu11GC，在不同的条件下被触发。</p>\n<h3 id=\"G1收集器的适用场景\">G1收集器的适用场景</h3>\n<p>面向服务端应用，针对具有大内存、多处理器的机器。（在普通大小的堆里表现并不惊喜）</p>\n<p>最主要的应用是需要低GC延迟，并具有大堆的应用程序提供解决方案；</p>\n<p>如：在堆大小约6GB或更大时，可预测的暂停时间可以低于e.5秒；（G1通过每次只清理一部分而不是全部的Region的增量式清理来保证每次Gc停顿时间不会过长）。 用来替换掉JDK1.5中的CMS收集器；在下面的情况时，使用61可能比CMS好：</p>\n<ul>\n<li>超过5e%的Java堆被活动数据占用；</li>\n<li>对象分配频率或年代提升频率变化很大；</li>\n<li>GC停顿时间过长（长于e.5至1秒）</li>\n</ul>\n<p>HotSpot垃圾收集器里，除了61以外，其他的垃圾收集器使用内置的JVM线程执行Gc的多线程操作，而G1GC可以采用应用线程承担后台运行的GC工作，即当JVM的GC线程处理速度慢时，系统会调用应用程序线程帮助加速垃圾回收过程。</p>\n<h3 id=\"分区Region-化整为零\">分区Region：化整为零</h3>\n<p>使用G1收集器时，它将整个Java堆划分成约2048个大小相同的独立Region块，每个Region块大小根据堆空间的实际大小而定，整体被控制在1MB到32MB之间，且为2的N次幂，即1MB，2MB，4MB，8MB，16MB，32MB。可以通过</p>\n<p>XX:G1HeapRegionsize设定。所有的Region大小相同，且在JVM生命周期内不会被改变。</p>\n<p>虽然还保留有新生代和老年代的概念，但新生代和老年代不再是物理隔离的了，它们都是一部分Region（不需要连续）的集合。通过Region的动态分配方式实现逻辑上的连续。</p>\n<p><img src=\"http://image.moguit.cn/0f3195e8412a4c04ae9f5ad301dc588a\" alt=\"image-20200713223244886\" /></p>\n<p>一个region有可能属于Eden，Survivor或者old/Tenured内存区域。但是一个region只可能属于一个角色。图中的E表示该region属于Eden内存区域，s表示属于survivor内存区域，o表示属于01d内存区域。图中空白的表示未使用的内存空间。</p>\n<p>G1垃圾收集器还增加了一种新的内存区域，叫做Humongous内存区域，如图中的H块。主要用于存储大对象，如果超过1.5个region，就放到H。</p>\n<p>**设置H的原因：**对于堆中的对象，默认直接会被分配到老年代，但是如果它是一个短期存在的大对象就会对垃圾收集器造成负面影响。为了解决这个问题，G1划分了一个Humongous区，它用来专门存放大对象。如果一个H区装不下一个大对象，那么G1会寻找连续的H区来存储。为了能找到连续的H区，有时候不得不启动Fu11Gc。G1的大多数行为都把H区作为老年代的一部分来看待。</p>\n<p>每个Region都是通过指针碰撞来分配空间</p>\n<p><img src=\"http://image.moguit.cn/c06aadcef53c4becb21da57be83d1ba0\" alt=\"image-20200713223509993\" /></p>\n<h3 id=\"G1垃圾回收器的回收过程\">G1垃圾回收器的回收过程</h3>\n<p>G1GC的垃圾回收过程主要包括如下三个环节：</p>\n<ul>\n<li>年轻代GC（Young GC）</li>\n<li>老年代并发标记过程（Concurrent Marking）</li>\n<li>混合回收（Mixed GC）</li>\n</ul>\n<p>（如果需要，单线程、独占式、高强度的Fu11GC还是继续存在的。它针对GC的评估失败提供了一种失败保护机制，即强力回收。）</p>\n<p><img src=\"http://image.moguit.cn/5c542594ac9444b48043f4b23c2ec44c\" alt=\"image-20200713224113996\" /></p>\n<p>顺时针，young gc-&gt;young gc+concurrent mark-&gt;Mixed GC顺序，进行垃圾回收。</p>\n<p>应用程序分配内存，当年轻代的Eden区用尽时开始年轻代回收过程；G1的年轻代收集阶段是一个并行的独占式收集器。在年轻代回收期，G1GC暂停所有应用程序线程，启动多线程执行年轻代回收。然后从年轻代区间移动存活对象到Survivor区间或者老年区间，也有可能是两个区间都会涉及。</p>\n<p>当堆内存使用达到一定值（默认45%）时，开始老年代并发标记过程。</p>\n<p>标记完成马上开始混合回收过程。对于一个混合回收期，G1GC从老年区间移动存活对象到空闲区间，这些空闲区间也就成为了老年代的一部分。和年轻代不同，老年代的G1回收器和其他GC不同，G1的老年代回收器不需要整个老年代被回收，一次只需要扫描/回收一小部分老年代的Region就可以了。同时，这个老年代Region是和年轻代一起被回收的。</p>\n<p>举个例子：一个Web服务器，Java进程最大堆内存为4G，每分钟响应1500个请求，每45秒钟会新分配大约2G的内存。G1会每45秒钟进行一次年轻代回收，每31个小时整个堆的使用率会达到45%，会开始老年代并发标记过程，标记完成后开始四到五次的混合回收。</p>\n<h3 id=\"Remembered-Set-记忆集-\">Remembered Set（记忆集）</h3>\n<p>一个对象被不同区域引用的问题</p>\n<p>一个Region不可能是孤立的，一个Region中的对象可能被其他任意Region中对象引用，判断对象存活时，是否需要扫描整个Java堆才能保证准确？</p>\n<p>在其他的分代收集器，也存在这样的问题（而G1更突出）回收新生代也不得不同时扫描老年代？这样的话会降低MinorGC的效率；</p>\n<p><strong>解决方法：</strong></p>\n<p>无论G1还是其他分代收集器，JVM都是使用Remembered Set来避免全局扫描：</p>\n<p>每个Region都有一个对应的Remembered Set；每次Reference类型数据写操作时，都会产生一个Write Barrier暂时中断操作；</p>\n<p>然后检查将要写入的引用指向的对象是否和该Reference类型数据在不同的Region（其他收集器：检查老年代对象是否引用了新生代对象）；如果不同，通过cardTable把相关引用信息记录到引用指向对象的所在Region对应的Remembered Set中；当进行垃圾收集时，在GC根节点的枚举范围加入Remembered Set；就可以保证不进行全局扫描，也不会有遗漏。</p>\n<p><img src=\"http://image.moguit.cn/42f3aad6f049435381badb4c052fe176\" alt=\"image-20200713224716715\" /></p>\n<h3 id=\"G1回收过程-年轻代GC\">G1回收过程-年轻代GC</h3>\n<p>JVM启动时，G1先准备好Eden区，程序在运行过程中不断创建对象到Eden区，当Eden空间耗尽时，G1会启动一次年轻代垃圾回收过程。</p>\n<p>YGC时，首先G1停止应用程序的执行（stop-The-Wor1d），G1创建回收集（Collection Set），回收集是指需要被回收的内存分段的集合，年轻代回收过程的回收集包含年轻代Eden区和Survivor区所有的内存分段。</p>\n<p><img src=\"http://image.moguit.cn/3713efc8ca9d49f288f57a13de3ba121\" alt=\"image-20200713225100632\" /></p>\n<p>然后开始如下回收过程：</p>\n<ul>\n<li>第一阶段，扫描根</li>\n</ul>\n<p>根是指static变量指向的对象，正在执行的方法调用链条上的局部变量等。根引用连同RSet记录的外部引用作为扫描存活对象的入口。</p>\n<ul>\n<li>第二阶段，更新RSet</li>\n</ul>\n<p>处理dirty card queue（见备注）中的card，更新RSet。此阶段完成后，RSet可以准确的反映老年代对所在的内存分段中对象的引用。</p>\n<ul>\n<li>第三阶段，处理RSet</li>\n</ul>\n<p>识别被老年代对象指向的Eden中的对象，这些被指向的Eden中的对象被认为是存活的对象。</p>\n<ul>\n<li>第四阶段，复制对象。</li>\n</ul>\n<p>此阶段，对象树被遍历，Eden区内存段中存活的对象会被复制到Survivor区中空的内存分段，Survivor区内存段中存活的对象如果年龄未达阈值，年龄会加1，达到阀值会被会被复制到o1d区中空的内存分段。如果Survivor空间不够，Eden空间的部分数据会直接晋升到老年代空间。</p>\n<ul>\n<li>第五阶段，处理引用</li>\n</ul>\n<p>处理Soft，Weak，Phantom，Final，JNI Weak 等引用。最终Eden空间的数据为空，GC停止工作，而目标内存中的对象都是连续存储的，没有碎片，所以复制过程可以达到内存整理的效果，减少碎片。</p>\n<h3 id=\"G1回收过程-并发标记过程\">G1回收过程-并发标记过程</h3>\n<ul>\n<li>初始标记阶段：标记从根节点直接可达的对象。这个阶段是sTw的，并且会触发一次年轻代GC。</li>\n<li>根区域扫描（Root Region Scanning）：G1 Gc扫描survivor区直接可达的老年代区域对象，并标记被引用的对象。这一过程必须在youngGC之前完成。</li>\n<li>并发标记（Concurrent Marking）：在整个堆中进行并发标记（和应用程序并发执行），此过程可能被youngGC中断。在并发标记阶段，若发现区域对象中的所有对象都是垃圾，那这个区域会被立即回收。同时，并发标记过程中，会计算每个区域的对象活性（区域中存活对象的比例）。</li>\n<li>再次标记（Remark）：由于应用程序持续进行，需要修正上一次的标记结果。是STW的。G1中采用了比CMS更快的初始快照算法：snapshot-at-the-beginning（SATB）。</li>\n<li>独占清理（cleanup，STW）：计算各个区域的存活对象和GC回收比例，并进行排序，识别可以混合回收的区域。为下阶段做铺垫。是sTw的。这个阶段并不会实际上去做垃圾的收集</li>\n<li>并发清理阶段：识别并清理完全空闲的区域。</li>\n</ul>\n<h3 id=\"G1回收过程---混合回收\">G1回收过程 - 混合回收</h3>\n<p>当越来越多的对象晋升到老年代o1d region时，为了避免堆内存被耗尽，虚拟机会触发一个混合的垃圾收集器，即Mixed GC，该算法并不是一个old GC，除了回收整个Young Region，还会回收一部分的old Region。这里需要注意：<strong>是一部分老年代，而不是全部老年代</strong>。可以选择哪些o1d Region进行收集，从而可以对垃圾回收的耗时时间进行控制。也要注意的是Mixed GC并不是Full GC。</p>\n<p><img src=\"http://image.moguit.cn/127776c15dce4bc185787acf451c9f59\" alt=\"image-20200713225810871\" /></p>\n<p>并发标记结束以后，老年代中百分百为垃圾的内存分段被回收了，部分为垃圾的内存分段被计算了出来。默认情况下，这些老年代的内存分段会分8次（可以通过-XX:G1MixedGCCountTarget设置）被回收</p>\n<p>混合回收的回收集（Collection Set）包括八分之一的老年代内存分段，Eden区内存分段，Survivor区内存分段。混合回收的算法和年轻代回收的算法完全一样，只是回收集多了老年代的内存分段。具体过程请参考上面的年轻代回收过程。</p>\n<p>由于老年代中的内存分段默认分8次回收，G1会优先回收垃圾多的内存分段。垃圾占内存分段比例越高的，越会被先回收。并且有一个阈值会决定内存分段是否被回收，</p>\n<p>XX:G1MixedGCLiveThresholdPercent，默认为65%，意思是垃圾占内存分段比例要达到65%才会被回收。如果垃圾占比太低，意味着存活的对象占比高，在复制的时候会花费更多的时间。</p>\n<p>混合回收并不一定要进行8次。有一个阈值-XX:G1HeapWastePercent，默认值为1e%，意思是允许整个堆内存中有10%的空间被浪费，意味着如果发现可以回收的垃圾占堆内存的比例低于1e%，则不再进行混合回收。因为GC会花费很多的时间但是回收到的内存却很少。</p>\n<h3 id=\"G1回收可选的过程4---Full-GC\">G1回收可选的过程4 - Full GC</h3>\n<p>G1的初衷就是要避免Fu11GC的出现。但是如果上述方式不能正常工作，G1会停止应用程序的执行（stop-The-world），使用单线程的内存回收算法进行垃圾回收，性能会非常差，应用程序停顿时间会很长。</p>\n<p>要避免Fu11GC的发生，一旦发生需要进行调整。什么时候会发生Ful1GC呢？比如堆内存太小，当G1在复制存活对象的时候没有空的内存分段可用，则会回退到ful1gc，这种情况可以通过增大内存解决。 导致61Fu11GC的原因可能有两个：</p>\n<ul>\n<li>EVacuation的时候没有足够的to-space来存放晋升的对象；</li>\n<li>并发处理过程完成之前空间耗尽。</li>\n</ul>\n<h3 id=\"G1回收的优化建议\">G1回收的优化建议</h3>\n<p>从oracle官方透露出来的信息可获知，回收阶段（Evacuation）其实本也有想过设计成与用户程序一起并发执行，但这件事情做起来比较复杂，考虑到G1只是回一部分Region，停顿时间是用户可控制的，所以并不迫切去实现，而选择把这个特性放到了G1之后出现的低延迟垃圾收集器（即ZGC）中。另外，还考虑到G1不是仅仅面向低延迟，停顿用户线程能够最大幅度提高垃圾收集效率，为了保证吞吐量所以才选择了完全暂停用户线程的实现方案。</p>\n<p>年轻代大小</p>\n<ul>\n<li>避免使用-Xmn或-XX:NewRatio等相关选项显式设置年轻代大小</li>\n<li>固定年轻代的大小会覆盖</li>\n</ul>\n<p>暂停时间目标暂停时间目标不要太过严苛</p>\n<ul>\n<li>G1 GC的吞吐量目标是90%的应用程序时间和10%的垃圾回收时间</li>\n<li>评估G1GC的吞吐量时，暂停时间目标不要太严苛。目标太过严苛表示你愿意承受更多的垃圾回收开销，而这些会直接影响到吞吐量。</li>\n</ul>\n<h2 id=\"垃圾回收器总结\">垃圾回收器总结</h2>\n<p>截止JDK1.8，一共有7款不同的垃圾收集器。每一款的垃圾收集器都有不同的特点，在具体使用的时候，需要根据具体的情况选用不同的垃圾收集器。</p>\n<p><img src=\"http://image.moguit.cn/7bbd145aeb3e47ffbf9ef6cd472a2cc7\" alt=\"image-20200714075738203\" /></p>\n<p>GC发展阶段：Seria l=&gt; Parallel（并行）=&gt; CMS（并发）=&gt; G1 =&gt; ZGC</p>\n<p>不同厂商、不同版本的虚拟机实现差距比较大。HotSpot虚拟机在JDK7/8后所有收集器及组合如下图</p>\n<p><img src=\"http://image.moguit.cn/827e304bf1194104a3e824a4ab9dc384\" alt=\"image-20200714080151020\" /></p>\n<h3 id=\"怎么选择垃圾回收器\">怎么选择垃圾回收器</h3>\n<p>Java垃圾收集器的配置对于JVM优化来说是一个很重要的选择，选择合适的垃圾收集器可以让JVM的性能有一个很大的提升。怎么选择垃圾收集器？</p>\n<ul>\n<li>优先调整堆的大小让JVM自适应完成。</li>\n<li>如果内存小于100M，使用串行收集器</li>\n<li>如果是单核、单机程序，并且没有停顿时间的要求，串行收集器</li>\n<li>如果是多CPU、需要高吞吐量、允许停顿时间超过1秒，选择并行或者JVM自己选择</li>\n<li>如果是多CPU、追求低停顿时间，需快速响应（比如延迟不能超过1秒，如互联网应用），使用并发收集器</li>\n<li>官方推荐G1，性能高。现在互联网的项目，基本都是使用G1。</li>\n</ul>\n<p>最后需要明确一个观点：</p>\n<ul>\n<li>没有最好的收集器，更没有万能的收集</li>\n<li>调优永远是针对特定场景、特定需求，不存在一劳永逸的收集器</li>\n</ul>\n<h3 id=\"面试\">面试</h3>\n<p>对于垃圾收集，面试官可以循序渐进从理论、实践各种角度深入，也未必是要求面试者什么都懂。但如果你懂得原理，一定会成为面试中的加分项。 这里较通用、基础性的部分如下：</p>\n<p>垃圾收集的算法有哪些？如何判断一个对象是否可以回收？</p>\n<p>垃圾收集器工作的基本流程。</p>\n<p>另外，大家需要多关注垃圾回收器这一章的各种常用的参数</p>\n<h2 id=\"GC日志分析\">GC日志分析</h2>\n<p>通过阅读Gc日志，我们可以了解Java虚拟机内存分配与回收策略。 内存分配与垃圾回收的参数列表</p>\n<ul>\n<li>-XX:+PrintGc输出GC日志。类似：-verbose:gc</li>\n<li>-XX:+PrintGcDetails输出Gc的详细日志</li>\n<li>-XX:+PrintGcTimestamps 输出Gc的时间戳（以基准时间的形式）</li>\n<li>-XX:+PrintGCDatestamps 输出Gc的时间戳（以日期的形式，如2013-05-04T21：53：59.234+0800）</li>\n<li>-XX:+PrintHeapAtGC在进行Gc的前后打印出堆的信息</li>\n<li>-Xloggc:../logs/gc.1og日志文件的输出路径</li>\n</ul>\n<h3 id=\"verbose-gc\">verbose:gc</h3>\n<p>打开GC日志</p>\n<pre><code class=\"language-bash\">-verbose:gc\n\n</code></pre>\n<p>这个只会显示总的GC堆的变化，如下：</p>\n<p><img src=\"http://image.moguit.cn/6554517157554a5f956c14ab5256a8d2\" alt=\"image-20200714081610474\" /></p>\n<p>参数解析</p>\n<p><img src=\"http://image.moguit.cn/49ed4aad0976462d95fe69a111554d57\" alt=\"image-20200714081622526\" /></p>\n<h3 id=\"PrintGCDetails\">PrintGCDetails</h3>\n<p>打开GC日志</p>\n<pre><code class=\"language-bash\">-verbose:gc -XX:+PrintGCDetails\n\n</code></pre>\n<p>输入信息如下</p>\n<p><img src=\"http://image.moguit.cn/e52e549d02b54a379a9e2b01860620b8\" alt=\"image-20200714081909309\" /></p>\n<p>参数解析</p>\n<p><img src=\"http://image.moguit.cn/564fb80c36a74ead8da0d084d78d60f3\" alt=\"image-20200714081925767\" /></p>\n<h3 id=\"补充\">补充</h3>\n<ul>\n<li>[GC&quot;和&quot;[Fu11GC&quot;说明了这次垃圾收集的停顿类型，如果有&quot;Fu11&quot;则说明GC发生了&quot;stop The World&quot;</li>\n<li>使用Seria1收集器在新生代的名字是Default New Generation，因此显示的是&quot;[DefNew&quot;</li>\n<li>使用ParNew收集器在新生代的名字会变成&quot;[ParNew&quot;，意思是&quot;Parallel New Generation&quot;</li>\n<li>使用Paralle1 scavenge收集器在新生代的名字是”[PSYoungGen&quot;</li>\n<li>老年代的收集和新生代道理一样，名字也是收集器决定的</li>\n<li>使用G1收集器的话，会显示为&quot;garbage-first heap&quot;</li>\n</ul>\n<p>Allocation Failure表明本次引起GC的原因是因为在年轻代中没有足够的空间能够存储新的数据了。</p>\n<p>[PSYoungGen：5986K-&gt;696K（8704K）]5986K-&gt;704K（9216K）中括号内：GC回收前年轻代大小，回收后大小，（年轻代总大小）括号外：GC回收前年轻代和老年代大小，回收后大小，（年轻代和老年代总大小）</p>\n<p>user代表用户态回收耗时，sys内核态回收耗时，rea实际耗时。由于多核的原因，时间总和可能会超过rea1时间</p>\n<h3 id=\"Young-GC图片\">Young GC图片</h3>\n<p><img src=\"http://image.moguit.cn/1d27507cd71e45aeb9a7bd66afe03115\" alt=\"image-20200714082555688\" /></p>\n<h3 id=\"FullGC图片-\">FullGC图片、</h3>\n<p><img src=\"http://image.moguit.cn/810ab4da1ff94137a22e288b83ec76a0\" alt=\"image-20200714082714690\" /></p>\n<h3 id=\"GC回收举例\">GC回收举例</h3>\n<p>我们编写一个程序，用来说明GC收集的过程</p>\n<pre><code class=\"language-java\">/**\n * GC垃圾收集过程\n * @author: 陌溪\n * @create: 2020-07-14-8:35\n */\npublic class GCUseTest {\n    static final Integer _1MB = 1024 * 1024;\n    public static void main(String[] args) {\n        byte [] allocation1, allocation2, allocation3, allocation4;\n        allocation1 = new byte[2 *_1MB];\n        allocation2 = new byte[2 *_1MB];\n        allocation3 = new byte[2 *_1MB];\n        allocation4 = new byte[4 *_1MB];\n    }\n}\n\n</code></pre>\n<p>我们设置JVM启动参数</p>\n<pre><code class=\"language-bash\">-Xms10m -Xmx10m -XX:+PrintGCDetails\n\n</code></pre>\n<p>首先我们会将3个2M的数组存放到Eden区，然后后面4M的数组来了后，将无法存储，因为Eden区只剩下2M的剩余空间了，那么将会进行一次Young GC操作，将原来Eden区的内容，存放到Survivor区，但是Survivor区也存放不下，那么就会直接晋级存入Old 区</p>\n<p><img src=\"http://image.moguit.cn/05329144e4a848539a196a911210cac2\" alt=\"image-20200714083332238\" /></p>\n<p>然后我们将4M对象存入到Eden区中</p>\n<p><img src=\"http://image.moguit.cn/bfe9a7aa4fe44611a4225ffa5907d175\" alt=\"image-20200714083526790\" /></p>\n<p>可以用一些工具去分析这些GC日志</p>\n<p>常用的日志分析工具有：GCViewer、GCEasy、GCHisto、GCLogViewer、Hpjmeter、garbagecat等</p>\n<p><strong>GCViewer</strong></p>\n<p><img src=\"http://image.moguit.cn/58a5e03f426e40378c368fcad3ad7fb0\" alt=\"image-20200714084921184\" /></p>\n<p><strong>GC easy</strong></p>\n<p><img src=\"http://image.moguit.cn/ba907d5d7e2a4cf2b359bc2ee8b8f58a\" alt=\"image-20200714084726824\" /></p>\n<h2 id=\"垃圾回收器的新发展\">垃圾回收器的新发展</h2>\n<p>GC仍然处于飞速发展之中，目前的默认选项G1GC在不断的进行改进，很多我们原来认为的缺点，例如串行的Fu11GC、Card Table扫描的低效等，都已经被大幅改进，例如，JDK10以后，Fu11GC已经是并行运行，在很多场景下，其表现还略优于ParallelGC的并行Ful1GC实现。</p>\n<p>即使是SerialGC，虽然比较古老，但是简单的设计和实现未必就是过时的，它本身的开销，不管是GC相关数据结构的开销，还是线程的开销，都是非常小的，所以随着云计算的兴起，在serverless等新的应用场景下，Serial Gc找到了新的舞台。</p>\n<p>比较不幸的是CMSGC，因为其算法的理论缺陷等原因，虽然现在还有非常大的用户群体，但在JDK9中已经被标记为废弃，并在JDK14版本中移除</p>\n<p>Epsilon:A No-Op GarbageCollector（Epsilon垃圾回收器，&quot;No-Op（无操作）&quot;回收器）<a href=\"http://openidk.iava.net/iep\">http://openidk.iava.net/iep</a> s/318</p>\n<p>ZGC:A Scalable Low-Latency Garbage Collector（Experimental）（ZGC：可伸缩的低延迟垃圾回收器，处于实验性阶段）</p>\n<p>现在G1回收器已成为默认回收器好几年了。我们还看到了引入了两个新的收集器：ZGC（JDK11出现）和Shenandoah（Open JDK12）</p>\n<blockquote>\n<p>主打特点：低停顿时间</p>\n</blockquote>\n<h3 id=\"Open-JDK12的Shenandoash-GC\">Open JDK12的Shenandoash GC</h3>\n<p>Open JDK12的shenandoash GC：低停顿时间的GC（实验性）</p>\n<p>Shenandoah，无疑是众多GC中最孤独的一个。是第一款不由oracle公司团队领导开发的Hotspot垃圾收集器。不可避免的受到官方的排挤。比如号称openJDK和OracleJDk没有区别的Oracle公司仍拒绝在oracleJDK12中支持Shenandoah。</p>\n<p>Shenandoah垃圾回收器最初由RedHat进行的一项垃圾收集器研究项目Pauseless GC的实现，旨在针对JVM上的内存回收实现低停顿的需求。在2014年贡献给OpenJDK。</p>\n<p>Red Hat研发Shenandoah团队对外宣称，Shenandoah垃圾回收器的暂停时间与堆大小无关，这意味着无论将堆设置为200MB还是200GB，99.9%的目标都可以把垃圾收集的停顿时间限制在十毫秒以内。不过实际使用性能将取决于实际工作堆的大小和工作负载。</p>\n<p><img src=\"http://image.moguit.cn/cfd6595a3f3249ec986ee9e45f1fed13\" alt=\"image-20200714090608807\" /></p>\n<p>这是RedHat在2016年发表的论文数据，测试内容是使用Es对200GB的维基百科数据进行索引。从结果看：</p>\n<blockquote>\n<p>停顿时间比其他几款收集器确实有了质的飞跃，但也未实现最大停顿时间控制在十毫秒以内的目标。 而吞吐量方面出现了明显的下降，总运行时间是所有测试收集器里最长的。</p>\n</blockquote>\n<p>总结</p>\n<ul>\n<li>shenandoah Gc的弱项：高运行负担下的吞吐量下降。</li>\n<li>shenandoah GC的强项：低延迟时间。</li>\n</ul>\n<h3 id=\"革命性的ZGC\">革命性的ZGC</h3>\n<p>zGC与shenandoah目标高度相似，在尽可能对吞吐量影响不大的前提下，实现在任意堆内存大小下都可以把垃圾收集的停颇时间限制在十毫秒以内的低延迟。</p>\n<p>《深入理解Java虚拟机》一书中这样定义zGC：2GC收集器是一款基于Region内存布局的，（暂时）不设分代的，使用了读屏障、染色指针和内存多重映射等技术来实现可并发的标记-压缩算法的，以低延迟为首要目标的一款垃圾收集器。</p>\n<p>ZGC的工作过程可以分为4个阶段：<strong>并发标记 - 并发预备重分配 - 并发重分配 - 并发重映射</strong> 等。</p>\n<p>ZGC几乎在所有地方并发执行的，除了初始标记的是STw的。所以停顿时间几乎就耗费在初始标记上，这部分的实际时间是非常少的。</p>\n<p><img src=\"http://image.moguit.cn/77e579af05784c5caa5bac520e0ccfa9\" alt=\"image-20200714091201073\" /></p>\n<p>停顿时间对比</p>\n<p><img src=\"http://image.moguit.cn/83965f8a8afc4b05a22cabde793e3526\" alt=\"image-20200714091401511\" /></p>\n<p>虽然ZGC还在试验状态，没有完成所有特性，但此时性能已经相当亮眼，用“令人震惊、革命性”来形容，不为过。 未来将在服务端、大内存、低延迟应用的首选垃圾收集器。</p>\n<p><img src=\"http://image.moguit.cn/f7d81d6e33424719af53019e80a519de\" alt=\"image-20200714093243028\" /></p>\n<p>JDK14之前，2GC仅Linux才支持。</p>\n<p>尽管许多使用zGc的用户都使用类Linux的环境，但在Windows和macos上，人们也需要zGC进行开发部署和测试。许多桌面应用也可以从ZGC中受益。因此，2GC特性被移植到了Windows和macos上。</p>\n<p>现在mac或Windows上也能使用zGC了，示例如下：</p>\n<pre><code class=\"language-bash\">-XX:+UnlockExperimentalVMOptions-XX：+UseZGC\n\n</code></pre>\n<h3 id=\"AliGC\">AliGC</h3>\n<p>AliGC是阿里巴巴JVM团队基于G1算法，面向大堆（LargeHeap）应用场景。指定场景下的对比：</p>\n<p><img src=\"http://image.moguit.cn/35fa2d414f1a4507aa434422f87737cc\" alt=\"image-20200714093604012\" /></p>\n<p>当然，其它厂商也提供了各种别具一格的GC实现，例如比较有名的低延迟GC Zing</p>\n",
      "tagUid": "7e0e93ea6cdb44ae92e58f48e6496ed7,15721a34adba068763b5a2fb1991fc57,5626932d452c2ad863d9b3cb0b69d22d",
      "clickCount": 37,
      "collectCount": 1,
      "fileUid": "http://azhe.oss-cn-beijing.aliyuncs.com/FerryMan/20210510020349457.jpg",
      "status": true,
      "createTime": "2020-08-18 08:57:36",
      "updateTime": "2021-06-06 01:48:10",
      "adminUid": "1f01cd1d2f474743b241d74008b12333",
      "isOriginal": "1",
      "author": "admin",
      "articlesPart": "博客",
      "typeId": "2",
      "typeName": "后端技术",
      "level": false,
      "isPublish": "1",
      "sort": 0,
      "openComment": true,
      "type": false,
      "outsideLink": null,
      "userUid": "1401086531753611264",
      "articleSource": false,
      "createBy": null,
      "lastUpdateBy": "admin"
    },
    {
      "id": "1393646426487132160",
      "oid": 76,
      "title": "spring",
      "summary": "spring",
      "content": "\n![timg.jpg](http://1.116.227.4/group1/M00/00/00/CgAMDGCsxlSAXt3RAAATziywEPc750.jpg)\n\n![u=1807960243,3532704884fm=26fmt=autogp=0.jpg](http://1.116.227.4/group1/M00/00/00/CgAMDGCszFqAAFt9AAAXTtCjhbs324.jpg)\n\n::: hljs-center\n\n**哈哈哈哈**\n\n:::\n\n\n",
      "tagUid": null,
      "clickCount": 12,
      "collectCount": 0,
      "fileUid": "http://azhe.oss-cn-beijing.aliyuncs.com/FerryMan/20210516031559636.png",
      "status": true,
      "createTime": "2021-05-16 11:16:15",
      "updateTime": "2021-06-06 01:51:16",
      "adminUid": null,
      "isOriginal": "1",
      "author": "spring",
      "articlesPart": null,
      "typeId": "2",
      "typeName": "后端技术",
      "level": false,
      "isPublish": "1",
      "sort": 0,
      "openComment": true,
      "type": false,
      "outsideLink": null,
      "userUid": "1401086531753611264",
      "articleSource": false,
      "createBy": "admin",
      "lastUpdateBy": null
    }
  ]
}